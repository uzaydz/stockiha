import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import { 
  DndContext, 
  closestCenter, 
  KeyboardSensor, 
  PointerSensor, 
  useSensor, 
  useSensors,
  DragEndEvent,
  DragStartEvent,
  DragOverlay
} from '@dnd-kit/core';
import { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { restrictToWindowEdges } from '@dnd-kit/modifiers';
import Layout from '@/components/Layout';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus, Settings, Layers, Save, Eye, LayoutGrid, Image } from 'lucide-react';
import SortableLandingPageItem from '@/components/landing-page-builder/SortableLandingPageItem';
import FormComponentEditor from '@/components/landing-page-builder/FormComponentEditor';
import ImageComponentEditor from '@/components/landing-page-builder/ImageComponentEditor';
import { useSupabase } from '@/context/SupabaseContext';
import { useOrganization } from '@/hooks/useOrganization';
import { toast } from 'sonner';

// انشاء أنواع البيانات اللازمة
interface LandingPageComponent {
  id: string;
  type: string;
  isActive: boolean;
  settings: Record<string, any>;
}

interface LandingPage {
  id: string;
  name: string;
  slug: string;
  components: LandingPageComponent[];
  settings: {
    title: string;
    description: string;
    keywords: string;
    isPublished: boolean;
  }
}

const LandingPageBuilder: React.FC = () => {
  const { t } = useTranslation();
  const { id: pageId } = useParams<{ id: string }>();
  const { supabase } = useSupabase();
  const { organization } = useOrganization();
  const [activeTab, setActiveTab] = useState('editor');
  const [isSaving, setIsSaving] = useState(false);
  
  console.log('====> تهيئة صفحة محرر صفحة الهبوط، المعرف:', pageId);
  
  // التحقق من صحة المعرف
  const isValidUUID = (id?: string) => {
    if (!id) return false;
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    return uuidRegex.test(id);
  };
  
  const isNewPage = !pageId || pageId === 'new' || pageId === 'new-page' || !isValidUUID(pageId);
  console.log('====> صفحة جديدة أو معرف غير صالح:', isNewPage, 'المعرف:', pageId);
  
  const [currentPage, setCurrentPage] = useState<LandingPage>({
    id: pageId || 'new-page',
    name: 'صفحة هبوط جديدة',
    slug: 'new-landing-page',
    components: [],
    settings: {
      title: 'صفحة هبوط جديدة',
      description: '',
      keywords: '',
      isPublished: false
    }
  });
  
  const [activeComponentId, setActiveComponentId] = useState<string | null>(null);
  const [draggedComponent, setDraggedComponent] = useState<LandingPageComponent | null>(null);
  const [dataLoaded, setDataLoaded] = useState(false);
  
  // جلب بيانات الصفحة إذا كان هناك معرّف موجود
  useEffect(() => {
    console.log('====> useEffect للمعرف:', pageId);
    if (pageId && isValidUUID(pageId) && !dataLoaded) {
      console.log('====> جاري جلب البيانات للصفحة بالمعرف:', pageId);
      fetchLandingPage(pageId);
    }
  }, [pageId, dataLoaded]);
  
  // تحقق من وجود معلومات منقولة من صفحة القائمة
  useEffect(() => {
    console.log('====> useEffect للبيانات من الرابط');
    const searchParams = new URLSearchParams(window.location.search);
    const fromCreate = searchParams.get('from_create');
    
    if (fromCreate === 'true' && pageId) {
      // استخراج المعلومات من URL إذا وجدت
      const name = searchParams.get('name');
      const title = searchParams.get('title') || name;
      const description = searchParams.get('description') || '';
      const isPublished = searchParams.get('is_published') === 'true';
      
      console.log('====> بيانات من URL:', { name, title, description, isPublished });
      
      // تحديث الصفحة الحالية بالمعلومات المنقولة بشكل كامل فقط إذا كانت جديدة
      // ولم يتم جلب البيانات من قاعدة البيانات بعد
      if (name && !dataLoaded) {
        const updatedPage = {
          id: pageId,
          name: name,
          slug: currentPage.slug,
          components: currentPage.components,
          settings: {
            title: title || name,
            description: description || '',
            keywords: '',
            isPublished: isPublished
          }
        };
        
        console.log('====> تحديث الصفحة إلى:', updatedPage);
        setCurrentPage(updatedPage);
        
        // أيضًا، قم بتحديث العنوان في واجهة المستخدم
        document.title = `${name} - محرر صفحة الهبوط`;
      }
      
      // إزالة البارامترات من URL بعد استخدامها
      window.history.replaceState(null, '', `/landing-page-builder/${pageId}`);
    }
  }, [pageId, dataLoaded]);
  
  // جلب بيانات صفحة الهبوط
  const fetchLandingPage = async (landingPageId: string) => {
    try {
      console.log('====> جلب بيانات الصفحة بالمعرف:', landingPageId);
      const { data: pageData, error: pageError } = await supabase
        .from('landing_pages')
        .select('*')
        .eq('id', landingPageId)
        .eq('is_deleted', false)
        .single();
      
      if (pageError) {
        console.error('====> خطأ في جلب بيانات الصفحة:', pageError);
        throw pageError;
      }
      
      // تسجيل البيانات المستلمة للتشخيص
      console.log('====> بيانات الصفحة المستلمة:', pageData);
      
      // جلب مكونات الصفحة
      const { data: componentsData, error: componentsError } = await supabase
        .from('landing_page_components')
        .select('*')
        .eq('landing_page_id', landingPageId)
        .order('position', { ascending: true });
      
      if (componentsError) {
        console.error('====> خطأ في جلب مكونات الصفحة:', componentsError);
        throw componentsError;
      }
      
      console.log('====> بيانات المكونات المستلمة:', componentsData);
      
      // تحويل البيانات إلى الشكل المطلوب
      const formattedComponents: LandingPageComponent[] = componentsData.map(comp => ({
        id: comp.id,
        type: comp.type,
        isActive: comp.is_active,
        settings: comp.settings || {}
      }));
      
      // تأكد من أن جميع البيانات موجودة وصحيحة
      const updatedPage = {
        id: pageData.id,
        name: pageData.name || 'صفحة هبوط',
        slug: pageData.slug || '',
        components: formattedComponents,
        settings: {
          title: pageData.title || pageData.name || '',
          description: pageData.description || '',
          keywords: pageData.keywords || '',
          isPublished: pageData.is_published || false
        }
      };
      
      console.log('====> البيانات المحدثة للصفحة:', updatedPage);
      setCurrentPage(updatedPage);
      setDataLoaded(true);
      
      // تحديث العنوان في المتصفح
      document.title = `${pageData.name} - محرر صفحة الهبوط`;
      
    } catch (error) {
      console.error('====> خطأ في جلب بيانات صفحة الهبوط:', error);
      toast.error(t('حدث خطأ أثناء تحميل صفحة الهبوط'));
    }
  };
  
  // توليد رابط فريد بناءً على الاسم
  const generateUniqueSlug = async (baseName: string): Promise<string> => {
    // تحويل الاسم إلى رابط أساسي
    let baseSlug = baseName
      .toLowerCase()
      .replace(/[\s_]+/g, '-')
      .replace(/[^\u0621-\u064A\u0660-\u0669a-z0-9-]/g, '')
      .replace(/-+/g, '-')
      .replace(/^-+|-+$/g, '');
    
    if (!baseSlug) baseSlug = 'صفحة-هبوط';
    
    let slug = baseSlug;
    let counter = 1;
    let isUnique = false;
    
    // التحقق من فرادة الرابط
    while (!isUnique) {
      // فحص إذا كان الرابط موجود
      const { data, error } = await supabase
        .from('landing_pages')
        .select('id')
        .eq('organization_id', organization?.id)
        .eq('slug', slug)
        .eq('is_deleted', false);
      
      if (error) {
        console.error('خطأ في التحقق من الرابط:', error);
        return `${baseSlug}-${Date.now()}`;
      }
      
      if (data && data.length === 0) {
        isUnique = true;
      } else {
        // إذا كان موجود، أضف رقم للرابط
        slug = `${baseSlug}-${counter}`;
        counter++;
      }
    }
    
    return slug;
  };
  
  // حفظ صفحة الهبوط
  const saveLandingPage = async () => {
    if (!organization?.id) {
      toast.error(t('لم يتم العثور على المؤسسة'));
      return;
    }
    
    setIsSaving(true);
    try {
      let landingPageId = currentPage.id;
      
      // تحقق بشكل أكثر دقة مما إذا كانت الصفحة جديدة
      const isNewPage = !isValidUUID(landingPageId);
      
      console.log('====> حفظ الصفحة:', {
        landingPageId,
        isNewPage,
        currentPageData: currentPage
      });
      
      // حفظ أو تحديث بيانات الصفحة
      if (isNewPage) {
        // تأكد من فرادة الرابط
        const uniqueSlug = await generateUniqueSlug(currentPage.slug || currentPage.name);
        
        console.log('====> إنشاء صفحة جديدة مع الرابط:', uniqueSlug);
        
        // إنشاء صفحة جديدة
        const { data: newPage, error: pageError } = await supabase
          .from('landing_pages')
          .insert({
            organization_id: organization.id,
            name: currentPage.name,
            slug: uniqueSlug, // استخدام الرابط الفريد
            title: currentPage.settings.title,
            description: currentPage.settings.description,
            keywords: currentPage.settings.keywords,
            is_published: currentPage.settings.isPublished,
            created_by: (await supabase.auth.getUser()).data.user?.id
          })
          .select('id, slug')
          .single();
        
        if (pageError) {
          console.error('====> خطأ في إنشاء الصفحة:', pageError);
          if (pageError.code === '23505') {
            toast.error(t('يوجد صفحة أخرى بنفس الرابط، تم توليد رابط جديد'));
          } else {
            throw pageError;
          }
          return;
        }
        
        landingPageId = newPage.id;
        console.log('====> تم إنشاء صفحة جديدة بمعرف:', landingPageId);
        
        // تحديث الرابط في واجهة المستخدم إذا تم تغييره
        if (uniqueSlug !== currentPage.slug) {
          setCurrentPage(prev => ({ ...prev, id: landingPageId, slug: uniqueSlug }));
        } else {
          setCurrentPage(prev => ({ ...prev, id: landingPageId }));
        }
        
        // تغيير عنوان URL مباشرة لتعكس المعرف الجديد
        window.history.replaceState(null, '', `/landing-page-builder/${landingPageId}`);
      } else {
        // تأكد من وجود الصفحة أولاً
        const { data: existingPageCheck, error: checkError } = await supabase
          .from('landing_pages')
          .select('id, name, title, description, is_published')
          .eq('id', landingPageId)
          .single();
          
        if (checkError) {
          console.error('====> خطأ في التحقق من وجود الصفحة:', checkError);
          
          if (checkError.code === 'PGRST116') {
            console.log('====> الصفحة غير موجودة، إنشاء صفحة جديدة');
            // إذا لم يتم العثور على الصفحة، أنشئ صفحة جديدة
            const uniqueSlug = await generateUniqueSlug(currentPage.slug || currentPage.name);
            
            const { data: newPage, error: pageError } = await supabase
              .from('landing_pages')
              .insert({
                organization_id: organization.id,
                name: currentPage.name,
                slug: uniqueSlug,
                title: currentPage.settings.title,
                description: currentPage.settings.description,
                keywords: currentPage.settings.keywords,
                is_published: currentPage.settings.isPublished,
                created_by: (await supabase.auth.getUser()).data.user?.id
              })
              .select('id, slug')
              .single();
            
            if (pageError) {
              console.error('====> خطأ في إنشاء صفحة جديدة:', pageError);
              if (pageError.code === '23505') {
                toast.error(t('يوجد صفحة أخرى بنفس الرابط، تم توليد رابط جديد'));
              } else {
                throw pageError;
              }
              return;
            }
            
            landingPageId = newPage.id;
            setCurrentPage(prev => ({ ...prev, id: landingPageId, slug: uniqueSlug }));
            
            // تغيير عنوان URL مباشرة لتعكس المعرف الجديد
            window.history.replaceState(null, '', `/landing-page-builder/${landingPageId}`);
            
            // إضافة المكونات
            if (currentPage.components.length > 0) {
              const componentsToInsert = currentPage.components.map((comp, index) => ({
                landing_page_id: landingPageId,
                type: comp.type,
                position: index,
                is_active: comp.isActive,
                settings: comp.settings
              }));
              
              // إدراج المكونات دفعة واحدة
              const { error: componentsError } = await supabase
                .from('landing_page_components')
                .insert(componentsToInsert);
              
              if (componentsError) {
                console.error('====> خطأ في إنشاء المكونات:', componentsError);
              }
            }
          } else {
            throw checkError;
          }
        } else {
          // تحديث الصفحة الموجودة
          console.log('====> تحديث الصفحة الموجودة:', {
            existing: existingPageCheck,
            updates: {
              name: currentPage.name,
              title: currentPage.settings.title,
              description: currentPage.settings.description
            }
          });
          
          const { error: updateError } = await supabase
            .from('landing_pages')
            .update({
              name: currentPage.name,
              title: currentPage.settings.title,
              description: currentPage.settings.description,
              keywords: currentPage.settings.keywords,
              is_published: currentPage.settings.isPublished,
              updated_at: new Date().toISOString()
            })
            .eq('id', landingPageId);
          
          if (updateError) {
            console.error('====> خطأ في تحديث الصفحة:', updateError);
            throw updateError;
          }
          
          // تحديث المكونات
          await updateComponents(landingPageId);
        }
      }
      
      toast.success(t('تم حفظ الصفحة بنجاح'));
      
      // إعادة جلب البيانات من قاعدة البيانات لضمان التحديث الصحيح
      if (!isNewPage) {
        await fetchLandingPage(landingPageId);
      }
      
    } catch (error) {
      console.error('====> خطأ في حفظ صفحة الهبوط:', error);
      toast.error(t('حدث خطأ أثناء حفظ صفحة الهبوط'));
    } finally {
      setIsSaving(false);
    }
  };
  
  // وظيفة مساعدة لتحديث المكونات
  const updateComponents = async (pageId: string) => {
    try {
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      
      if (currentPage.components.length > 0) {
        // تحديد المكونات الحالية التي تحتوي على معرف UUID صالح
        const existingComponentIds = currentPage.components
          .filter(comp => comp.id && uuidRegex.test(comp.id))
          .map(comp => comp.id);
        
        console.log('====> تحديث المكونات:', {
          totalComponents: currentPage.components.length,
          existingComponents: existingComponentIds.length
        });
        
        // إذا كانت هناك مكونات موجودة سابقاً مع معرفات UUID صالحة
        if (existingComponentIds.length > 0) {
          // تحديث المكونات الموجودة ونشاء مكونات جديدة
          for (let i = 0; i < currentPage.components.length; i++) {
            const comp = currentPage.components[i];
            
            if (comp.id && uuidRegex.test(comp.id)) {
              // تحديث مكون موجود
              const { error: updateCompError } = await supabase
                .from('landing_page_components')
                .update({
                  position: i,
                  is_active: comp.isActive,
                  settings: comp.settings,
                  updated_at: new Date().toISOString()
                })
                .eq('id', comp.id);
              
              if (updateCompError) {
                console.error('====> خطأ في تحديث المكون:', comp.id, updateCompError);
              }
            } else {
              // إنشاء مكون جديد
              const { error: newCompError } = await supabase
                .from('landing_page_components')
                .insert({
                  landing_page_id: pageId,
                  type: comp.type,
                  position: i,
                  is_active: comp.isActive,
                  settings: comp.settings
                });
              
              if (newCompError) {
                console.error('====> خطأ في إنشاء مكون جديد:', newCompError);
              }
            }
          }
          
          // حذف المكونات التي لم تعد موجودة في الواجهة
          if (existingComponentIds.length > 0) {
            const { error: deleteError } = await supabase
              .from('landing_page_components')
              .delete()
              .eq('landing_page_id', pageId)
              .not('id', 'in', `(${existingComponentIds.join(',')})`);
            
            if (deleteError) {
              console.error('====> خطأ في حذف المكونات القديمة:', deleteError);
            }
          }
        } else {
          // حذف جميع المكونات القديمة وإضافة المكونات الجديدة
          // حذف المكونات الحالية
          const { error: deleteAllError } = await supabase
            .from('landing_page_components')
            .delete()
            .eq('landing_page_id', pageId);
          
          if (deleteAllError) {
            console.error('====> خطأ في حذف جميع المكونات:', deleteAllError);
          }
          
          // إضافة المكونات الجديدة
          const componentsToInsert = currentPage.components.map((comp, index) => ({
            landing_page_id: pageId,
            type: comp.type,
            position: index,
            is_active: comp.isActive,
            settings: comp.settings
          }));
          
          if (componentsToInsert.length > 0) {
            const { error: insertError } = await supabase
              .from('landing_page_components')
              .insert(componentsToInsert);
            
            if (insertError) {
              console.error('====> خطأ في إضافة المكونات الجديدة:', insertError);
            }
          }
        }
      } else {
        // إذا لم تكن هناك مكونات في الواجهة، حذف جميع المكونات من قاعدة البيانات
        const { error: deleteAllError } = await supabase
          .from('landing_page_components')
          .delete()
          .eq('landing_page_id', pageId);
        
        if (deleteAllError) {
          console.error('====> خطأ في حذف جميع المكونات عند عدم وجود مكونات:', deleteAllError);
        }
      }
    } catch (error) {
      console.error('====> خطأ في تحديث المكونات:', error);
      throw error;
    }
  };
  
  // إعداد أجهزة الاستشعار للسحب والإفلات
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );
  
  // معالجة بدء السحب
  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const draggedItem = currentPage.components.find(component => component.id === active.id);
    if (draggedItem) {
      setDraggedComponent(draggedItem);
    }
  };
  
  // معالجة انتهاء السحب
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    setDraggedComponent(null);
    
    if (over && active.id !== over.id) {
      const oldIndex = currentPage.components.findIndex(component => component.id === active.id);
      const newIndex = currentPage.components.findIndex(component => component.id === over.id);
      
      setCurrentPage(currentPage => {
        const components = arrayMove(currentPage.components, oldIndex, newIndex);
        return { ...currentPage, components };
      });
    }
  };
  
  // إضافة مكون جديد إلى الصفحة
  const addComponent = (type: string) => {
    const newComponent: LandingPageComponent = {
      id: `component-${Date.now()}`,
      type,
      isActive: true,
      settings: getDefaultSettingsForType(type)
    };
    
    setCurrentPage({
      ...currentPage,
      components: [...currentPage.components, newComponent]
    });
    
    // تنشيط المكون الجديد تلقائيًا
    setActiveComponentId(newComponent.id);
  };
  
  // الحصول على الإعدادات الافتراضية حسب نوع المكون
  const getDefaultSettingsForType = (type: string): Record<string, any> => {
    switch (type) {
      case 'hero':
        return {
          title: 'عنوان ترويجي',
          subtitle: 'النص الثانوي هنا',
          buttonText: 'اشتري الآن',
          buttonLink: '#',
          imageUrl: 'https://via.placeholder.com/800x600',
          backgroundColor: '#ffffff',
          textColor: '#000000'
        };
      case 'form':
        return {
          title: 'نموذج التواصل',
          productId: null,
          formId: null,
          buttonText: 'إرسال',
          backgroundColor: '#f9f9f9'
        };
      case 'text':
        return {
          content: '<p>أدخل المحتوى النصي هنا...</p>',
          alignment: 'right',
          textColor: '#333333',
          padding: '20px'
        };
      case 'image':
        return {
          imageUrl: '',
          altText: 'وصف الصورة',
          caption: '',
          maxWidth: '100%',
          alignment: 'center',
          border: false,
          borderColor: '#000000',
          borderWidth: 1,
          borderRadius: 0,
          shadow: false,
          shadowIntensity: 'medium',
          overlay: false,
          overlayColor: '#000000',
          overlayOpacity: 50,
          onClick: 'none',
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import { 
  DndContext, 
  closestCenter, 
  KeyboardSensor, 
  PointerSensor, 
  useSensor, 
  useSensors,
  DragEndEvent,
  DragStartEvent,
  DragOverlay
} from '@dnd-kit/core';
import { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { restrictToWindowEdges } from '@dnd-kit/modifiers';
import Layout from '@/components/Layout';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus, Settings, Layers, Save, Eye, LayoutGrid, Image } from 'lucide-react';
import SortableLandingPageItem from '@/components/landing-page-builder/SortableLandingPageItem';
import FormComponentEditor from '@/components/landing-page-builder/FormComponentEditor';
import ImageComponentEditor from '@/components/landing-page-builder/ImageComponentEditor';
import { useSupabase } from '@/context/SupabaseContext';
import { useOrganization } from '@/hooks/useOrganization';
import { toast } from 'sonner';

// انشاء أنواع البيانات اللازمة
interface LandingPageComponent {
  id: string;
  type: string;
  isActive: boolean;
  settings: Record<string, any>;
}

interface LandingPage {
  id: string;
  name: string;
  slug: string;
  components: LandingPageComponent[];
  settings: {
    title: string;
    description: string;
    keywords: string;
    isPublished: boolean;
  }
}

const LandingPageBuilder: React.FC = () => {
  const { t } = useTranslation();
  const { id: pageId } = useParams<{ id: string }>();
  const { supabase } = useSupabase();
  const { organization } = useOrganization();
  const [activeTab, setActiveTab] = useState('editor');
  const [isSaving, setIsSaving] = useState(false);
  
  console.log('====> تهيئة صفحة محرر صفحة الهبوط، المعرف:', pageId);
  
  // التحقق من صحة المعرف
  const isValidUUID = (id?: string) => {
    if (!id) return false;
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    return uuidRegex.test(id);
  };
  
  const isNewPage = !pageId || pageId === 'new' || pageId === 'new-page' || !isValidUUID(pageId);
  console.log('====> صفحة جديدة أو معرف غير صالح:', isNewPage, 'المعرف:', pageId);
  
  const [currentPage, setCurrentPage] = useState<LandingPage>({
    id: pageId || 'new-page',
    name: 'صفحة هبوط جديدة',
    slug: 'new-landing-page',
    components: [],
    settings: {
      title: 'صفحة هبوط جديدة',
      description: '',
      keywords: '',
      isPublished: false
    }
  });
  
  const [activeComponentId, setActiveComponentId] = useState<string | null>(null);
  const [draggedComponent, setDraggedComponent] = useState<LandingPageComponent | null>(null);
  const [dataLoaded, setDataLoaded] = useState(false);
  
  // جلب بيانات الصفحة إذا كان هناك معرّف موجود
  useEffect(() => {
    console.log('====> useEffect للمعرف:', pageId);
    if (pageId && isValidUUID(pageId) && !dataLoaded) {
      console.log('====> جاري جلب البيانات للصفحة بالمعرف:', pageId);
      fetchLandingPage(pageId);
    }
  }, [pageId, dataLoaded]);
  
  // تحقق من وجود معلومات منقولة من صفحة القائمة
  useEffect(() => {
    console.log('====> useEffect للبيانات من الرابط');
    const searchParams = new URLSearchParams(window.location.search);
    const fromCreate = searchParams.get('from_create');
    
    if (fromCreate === 'true' && pageId) {
      // استخراج المعلومات من URL إذا وجدت
      const name = searchParams.get('name');
      const title = searchParams.get('title') || name;
      const description = searchParams.get('description') || '';
      const isPublished = searchParams.get('is_published') === 'true';
      
      console.log('====> بيانات من URL:', { name, title, description, isPublished });
      
      // تحديث الصفحة الحالية بالمعلومات المنقولة بشكل كامل فقط إذا كانت جديدة
      // ولم يتم جلب البيانات من قاعدة البيانات بعد
      if (name && !dataLoaded) {
        const updatedPage = {
          id: pageId,
          name: name,
          slug: currentPage.slug,
          components: currentPage.components,
          settings: {
            title: title || name,
            description: description || '',
            keywords: '',
            isPublished: isPublished
          }
        };
        
        console.log('====> تحديث الصفحة إلى:', updatedPage);
        setCurrentPage(updatedPage);
        
        // أيضًا، قم بتحديث العنوان في واجهة المستخدم
        document.title = `${name} - محرر صفحة الهبوط`;
      }
      
      // إزالة البارامترات من URL بعد استخدامها
      window.history.replaceState(null, '', `/landing-page-builder/${pageId}`);
    }
  }, [pageId, dataLoaded]);
  
  // جلب بيانات صفحة الهبوط
  const fetchLandingPage = async (landingPageId: string) => {
    try {
      console.log('====> جلب بيانات الصفحة بالمعرف:', landingPageId);
      const { data: pageData, error: pageError } = await supabase
        .from('landing_pages')
        .select('*')
        .eq('id', landingPageId)
        .eq('is_deleted', false)
        .single();
      
      if (pageError) {
        console.error('====> خطأ في جلب بيانات الصفحة:', pageError);
        throw pageError;
      }
      
      // تسجيل البيانات المستلمة للتشخيص
      console.log('====> بيانات الصفحة المستلمة:', pageData);
      
      // جلب مكونات الصفحة
      const { data: componentsData, error: componentsError } = await supabase
        .from('landing_page_components')
        .select('*')
        .eq('landing_page_id', landingPageId)
        .order('position', { ascending: true });
      
      if (componentsError) {
        console.error('====> خطأ في جلب مكونات الصفحة:', componentsError);
        throw componentsError;
      }
      
      console.log('====> بيانات المكونات المستلمة:', componentsData);
      
      // تحويل البيانات إلى الشكل المطلوب
      const formattedComponents: LandingPageComponent[] = componentsData.map(comp => ({
        id: comp.id,
        type: comp.type,
        isActive: comp.is_active,
        settings: comp.settings || {}
      }));
      
      // تأكد من أن جميع البيانات موجودة وصحيحة
      const updatedPage = {
        id: pageData.id,
        name: pageData.name || 'صفحة هبوط',
        slug: pageData.slug || '',
        components: formattedComponents,
        settings: {
          title: pageData.title || pageData.name || '',
          description: pageData.description || '',
          keywords: pageData.keywords || '',
          isPublished: pageData.is_published || false
        }
      };
      
      console.log('====> البيانات المحدثة للصفحة:', updatedPage);
      setCurrentPage(updatedPage);
      setDataLoaded(true);
      
      // تحديث العنوان في المتصفح
      document.title = `${pageData.name} - محرر صفحة الهبوط`;
      
    } catch (error) {
      console.error('====> خطأ في جلب بيانات صفحة الهبوط:', error);
      toast.error(t('حدث خطأ أثناء تحميل صفحة الهبوط'));
    }
  };
  
  // توليد رابط فريد بناءً على الاسم
  const generateUniqueSlug = async (baseName: string): Promise<string> => {
    // تحويل الاسم إلى رابط أساسي
    let baseSlug = baseName
      .toLowerCase()
      .replace(/[\s_]+/g, '-')
      .replace(/[^\u0621-\u064A\u0660-\u0669a-z0-9-]/g, '')
      .replace(/-+/g, '-')
      .replace(/^-+|-+$/g, '');
    
    if (!baseSlug) baseSlug = 'صفحة-هبوط';
    
    let slug = baseSlug;
    let counter = 1;
    let isUnique = false;
    
    // التحقق من فرادة الرابط
    while (!isUnique) {
      // فحص إذا كان الرابط موجود
      const { data, error } = await supabase
        .from('landing_pages')
        .select('id')
        .eq('organization_id', organization?.id)
        .eq('slug', slug)
        .eq('is_deleted', false);
      
      if (error) {
        console.error('خطأ في التحقق من الرابط:', error);
        return `${baseSlug}-${Date.now()}`;
      }
      
      if (data && data.length === 0) {
        isUnique = true;
      } else {
        // إذا كان موجود، أضف رقم للرابط
        slug = `${baseSlug}-${counter}`;
        counter++;
      }
    }
    
    return slug;
  };
  
  // حفظ صفحة الهبوط
  const saveLandingPage = async () => {
    if (!organization?.id) {
      toast.error(t('لم يتم العثور على المؤسسة'));
      return;
    }
    
    setIsSaving(true);
    try {
      let landingPageId = currentPage.id;
      
      // تحقق بشكل أكثر دقة مما إذا كانت الصفحة جديدة
      const isNewPage = !isValidUUID(landingPageId);
      
      console.log('====> حفظ الصفحة:', {
        landingPageId,
        isNewPage,
        currentPageData: currentPage
      });
      
      // حفظ أو تحديث بيانات الصفحة
      if (isNewPage) {
        // تأكد من فرادة الرابط
        const uniqueSlug = await generateUniqueSlug(currentPage.slug || currentPage.name);
        
        console.log('====> إنشاء صفحة جديدة مع الرابط:', uniqueSlug);
        
        // إنشاء صفحة جديدة
        const { data: newPage, error: pageError } = await supabase
          .from('landing_pages')
          .insert({
            organization_id: organization.id,
            name: currentPage.name,
            slug: uniqueSlug, // استخدام الرابط الفريد
            title: currentPage.settings.title,
            description: currentPage.settings.description,
            keywords: currentPage.settings.keywords,
            is_published: currentPage.settings.isPublished,
            created_by: (await supabase.auth.getUser()).data.user?.id
          })
          .select('id, slug')
          .single();
        
        if (pageError) {
          console.error('====> خطأ في إنشاء الصفحة:', pageError);
          if (pageError.code === '23505') {
            toast.error(t('يوجد صفحة أخرى بنفس الرابط، تم توليد رابط جديد'));
          } else {
            throw pageError;
          }
          return;
        }
        
        landingPageId = newPage.id;
        console.log('====> تم إنشاء صفحة جديدة بمعرف:', landingPageId);
        
        // تحديث الرابط في واجهة المستخدم إذا تم تغييره
        if (uniqueSlug !== currentPage.slug) {
          setCurrentPage(prev => ({ ...prev, id: landingPageId, slug: uniqueSlug }));
        } else {
          setCurrentPage(prev => ({ ...prev, id: landingPageId }));
        }
        
        // تغيير عنوان URL مباشرة لتعكس المعرف الجديد
        window.history.replaceState(null, '', `/landing-page-builder/${landingPageId}`);
      } else {
        // تأكد من وجود الصفحة أولاً
        const { data: existingPageCheck, error: checkError } = await supabase
          .from('landing_pages')
          .select('id, name, title, description, is_published')
          .eq('id', landingPageId)
          .single();
          
        if (checkError) {
          console.error('====> خطأ في التحقق من وجود الصفحة:', checkError);
          
          if (checkError.code === 'PGRST116') {
            console.log('====> الصفحة غير موجودة، إنشاء صفحة جديدة');
            // إذا لم يتم العثور على الصفحة، أنشئ صفحة جديدة
            const uniqueSlug = await generateUniqueSlug(currentPage.slug || currentPage.name);
            
            const { data: newPage, error: pageError } = await supabase
              .from('landing_pages')
              .insert({
                organization_id: organization.id,
                name: currentPage.name,
                slug: uniqueSlug,
                title: currentPage.settings.title,
                description: currentPage.settings.description,
                keywords: currentPage.settings.keywords,
                is_published: currentPage.settings.isPublished,
                created_by: (await supabase.auth.getUser()).data.user?.id
              })
              .select('id, slug')
              .single();
            
            if (pageError) {
              console.error('====> خطأ في إنشاء صفحة جديدة:', pageError);
              if (pageError.code === '23505') {
                toast.error(t('يوجد صفحة أخرى بنفس الرابط، تم توليد رابط جديد'));
              } else {
                throw pageError;
              }
              return;
            }
            
            landingPageId = newPage.id;
            setCurrentPage(prev => ({ ...prev, id: landingPageId, slug: uniqueSlug }));
            
            // تغيير عنوان URL مباشرة لتعكس المعرف الجديد
            window.history.replaceState(null, '', `/landing-page-builder/${landingPageId}`);
            
            // إضافة المكونات
            if (currentPage.components.length > 0) {
              const componentsToInsert = currentPage.components.map((comp, index) => ({
                landing_page_id: landingPageId,
                type: comp.type,
                position: index,
                is_active: comp.isActive,
                settings: comp.settings
              }));
              
              // إدراج المكونات دفعة واحدة
              const { error: componentsError } = await supabase
                .from('landing_page_components')
                .insert(componentsToInsert);
              
              if (componentsError) {
                console.error('====> خطأ في إنشاء المكونات:', componentsError);
              }
            }
          } else {
            throw checkError;
          }
        } else {
          // تحديث الصفحة الموجودة
          console.log('====> تحديث الصفحة الموجودة:', {
            existing: existingPageCheck,
            updates: {
              name: currentPage.name,
              title: currentPage.settings.title,
              description: currentPage.settings.description
            }
          });
          
          const { error: updateError } = await supabase
            .from('landing_pages')
            .update({
              name: currentPage.name,
              title: currentPage.settings.title,
              description: currentPage.settings.description,
              keywords: currentPage.settings.keywords,
              is_published: currentPage.settings.isPublished,
              updated_at: new Date().toISOString()
            })
            .eq('id', landingPageId);
          
          if (updateError) {
            console.error('====> خطأ في تحديث الصفحة:', updateError);
            throw updateError;
          }
          
          // تحديث المكونات
          await updateComponents(landingPageId);
        }
      }
      
      toast.success(t('تم حفظ الصفحة بنجاح'));
      
      // إعادة جلب البيانات من قاعدة البيانات لضمان التحديث الصحيح
      if (!isNewPage) {
        await fetchLandingPage(landingPageId);
      }
      
    } catch (error) {
      console.error('====> خطأ في حفظ صفحة الهبوط:', error);
      toast.error(t('حدث خطأ أثناء حفظ صفحة الهبوط'));
    } finally {
      setIsSaving(false);
    }
  };
  
  // وظيفة مساعدة لتحديث المكونات
  const updateComponents = async (pageId: string) => {
    try {
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      
      if (currentPage.components.length > 0) {
        // تحديد المكونات الحالية التي تحتوي على معرف UUID صالح
        const existingComponentIds = currentPage.components
          .filter(comp => comp.id && uuidRegex.test(comp.id))
          .map(comp => comp.id);
        
        console.log('====> تحديث المكونات:', {
          totalComponents: currentPage.components.length,
          existingComponents: existingComponentIds.length
        });
        
        // إذا كانت هناك مكونات موجودة سابقاً مع معرفات UUID صالحة
        if (existingComponentIds.length > 0) {
          // تحديث المكونات الموجودة ونشاء مكونات جديدة
          for (let i = 0; i < currentPage.components.length; i++) {
            const comp = currentPage.components[i];
            
            if (comp.id && uuidRegex.test(comp.id)) {
              // تحديث مكون موجود
              const { error: updateCompError } = await supabase
                .from('landing_page_components')
                .update({
                  position: i,
                  is_active: comp.isActive,
                  settings: comp.settings,
                  updated_at: new Date().toISOString()
                })
                .eq('id', comp.id);
              
              if (updateCompError) {
                console.error('====> خطأ في تحديث المكون:', comp.id, updateCompError);
              }
            } else {
              // إنشاء مكون جديد
              const { error: newCompError } = await supabase
                .from('landing_page_components')
                .insert({
                  landing_page_id: pageId,
                  type: comp.type,
                  position: i,
                  is_active: comp.isActive,
                  settings: comp.settings
                });
              
              if (newCompError) {
                console.error('====> خطأ في إنشاء مكون جديد:', newCompError);
              }
            }
          }
          
          // حذف المكونات التي لم تعد موجودة في الواجهة
          if (existingComponentIds.length > 0) {
            const { error: deleteError } = await supabase
              .from('landing_page_components')
              .delete()
              .eq('landing_page_id', pageId)
              .not('id', 'in', `(${existingComponentIds.join(',')})`);
            
            if (deleteError) {
              console.error('====> خطأ في حذف المكونات القديمة:', deleteError);
            }
          }
        } else {
          // حذف جميع المكونات القديمة وإضافة المكونات الجديدة
          // حذف المكونات الحالية
          const { error: deleteAllError } = await supabase
            .from('landing_page_components')
            .delete()
            .eq('landing_page_id', pageId);
          
          if (deleteAllError) {
            console.error('====> خطأ في حذف جميع المكونات:', deleteAllError);
          }
          
          // إضافة المكونات الجديدة
          const componentsToInsert = currentPage.components.map((comp, index) => ({
            landing_page_id: pageId,
            type: comp.type,
            position: index,
            is_active: comp.isActive,
            settings: comp.settings
          }));
          
          if (componentsToInsert.length > 0) {
            const { error: insertError } = await supabase
              .from('landing_page_components')
              .insert(componentsToInsert);
            
            if (insertError) {
              console.error('====> خطأ في إضافة المكونات الجديدة:', insertError);
            }
          }
        }
      } else {
        // إذا لم تكن هناك مكونات في الواجهة، حذف جميع المكونات من قاعدة البيانات
        const { error: deleteAllError } = await supabase
          .from('landing_page_components')
          .delete()
          .eq('landing_page_id', pageId);
        
        if (deleteAllError) {
          console.error('====> خطأ في حذف جميع المكونات عند عدم وجود مكونات:', deleteAllError);
        }
      }
    } catch (error) {
      console.error('====> خطأ في تحديث المكونات:', error);
      throw error;
    }
  };
  
  // إعداد أجهزة الاستشعار للسحب والإفلات
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );
  
  // معالجة بدء السحب
  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const draggedItem = currentPage.components.find(component => component.id === active.id);
    if (draggedItem) {
      setDraggedComponent(draggedItem);
    }
  };
  
  // معالجة انتهاء السحب
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    setDraggedComponent(null);
    
    if (over && active.id !== over.id) {
      const oldIndex = currentPage.components.findIndex(component => component.id === active.id);
      const newIndex = currentPage.components.findIndex(component => component.id === over.id);
      
      setCurrentPage(currentPage => {
        const components = arrayMove(currentPage.components, oldIndex, newIndex);
        return { ...currentPage, components };
      });
    }
  };
  
  // إضافة مكون جديد إلى الصفحة
  const addComponent = (type: string) => {
    const newComponent: LandingPageComponent = {
      id: `component-${Date.now()}`,
      type,
      isActive: true,
      settings: getDefaultSettingsForType(type)
    };
    
    setCurrentPage({
      ...currentPage,
      components: [...currentPage.components, newComponent]
    });
    
    // تنشيط المكون الجديد تلقائيًا
    setActiveComponentId(newComponent.id);
  };
  
  // الحصول على الإعدادات الافتراضية حسب نوع المكون
  const getDefaultSettingsForType = (type: string): Record<string, any> => {
    switch (type) {
      case 'hero':
        return {
          title: 'عنوان ترويجي',
          subtitle: 'النص الثانوي هنا',
          buttonText: 'اشتري الآن',
          buttonLink: '#',
          imageUrl: 'https://via.placeholder.com/800x600',
          backgroundColor: '#ffffff',
          textColor: '#000000'
        };
      case 'form':
        return {
          title: 'نموذج التواصل',
          productId: null,
          formId: null,
          buttonText: 'إرسال',
          backgroundColor: '#f9f9f9'
        };
      case 'text':
        return {
          content: '<p>أدخل المحتوى النصي هنا...</p>',
          alignment: 'right',
          textColor: '#333333',
          padding: '20px'
        };
      case 'image':
        return {
          imageUrl: 'https://via.placeholder.com/800x600',
          altText: 'وصف الصورة',
          caption: '',
          maxWidth: '100%',
          alignment: 'center',
          border: false,
          borderColor: '#000000',
          borderWidth: 1,
          borderRadius: 0,
          shadow: false,
          shadowIntensity: 'medium',
          overlay: false,
          overlayColor: '#000000',
          overlayOpacity: 50,
          onClick: 'none',
          linkUrl: ''
        };
      case 'features':
        return {
          title: 'المميزات',
          features: [
            { title: 'ميزة 1', description: 'وصف الميزة', icon: 'star' },
            { title: 'ميزة 2', description: 'وصف الميزة', icon: 'check' },
            { title: 'ميزة 3', description: 'وصف الميزة', icon: 'heart' }
          ],
          columnsCount: 3
        };
      case 'testimonial':
        return {
          items: [
            { author: 'اسم العميل', quote: 'اقتباس إيجابي عن المنتج', avatar: null, rating: 5 }
          ],
          backgroundColor: '#f0f7ff'
        };
      default:
        return {};
    }
  };
  
  // حذف مكون من الصفحة
  const removeComponent = (id: string) => {
    setCurrentPage({
      ...currentPage,
      components: currentPage.components.filter(component => component.id !== id)
    });
    
    if (activeComponentId === id) {
      setActiveComponentId(null);
    }
  };
  
  // تنشيط مكون للتحرير
  const activateComponent = (id: string) => {
    setActiveComponentId(id);
  };
  
  // تحديث إعدادات المكون
  const updateComponentSettings = (id: string, settings: Record<string, any>) => {
    setCurrentPage({
      ...currentPage,
      components: currentPage.components.map(component => 
        component.id === id ? { ...component, settings: { ...component.settings, ...settings } } : component
      )
    });
  };
  
  // تبديل حالة تنشيط المكون
  const toggleComponentActive = (id: string) => {
    setCurrentPage({
      ...currentPage,
      components: currentPage.components.map(component => 
        component.id === id ? { ...component, isActive: !component.isActive } : component
      )
    });
  };
  
  // الحصول على المكون النشط
  const getActiveComponent = () => {
    if (!activeComponentId) return null;
    return currentPage.components.find(component => component.id === activeComponentId) || null;
  };
  
  // إضافة وظيفة لتتبع تغيير التبويب
  const handleTabChange = (tab: string) => {
    console.log('====> تغيير التبويب من', activeTab, 'إلى', tab);
    console.log('====> بيانات الصفحة الحالية عند تغيير التبويب:', currentPage);
    setActiveTab(tab);
  };
  
  return (
    <Layout>
      <div className="container mx-auto p-4">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">{t('إنشاء صفحة هبوط')}</h1>
          <div className="flex gap-2">
            <Button variant="outline" size="sm">
              <Eye className="h-4 w-4 mr-2" />
              {t('معاينة')}
            </Button>
            <Button 
              size="sm" 
              onClick={saveLandingPage}
              disabled={isSaving}
            >
              <Save className="h-4 w-4 mr-2" />
              {isSaving ? t('جاري الحفظ...') : t('حفظ')}
            </Button>
          </div>
        </div>
        
        <Tabs value={activeTab} onValueChange={handleTabChange} className="space-y-4">
          <TabsList className="grid grid-cols-2 w-[400px]">
            <TabsTrigger value="editor" className="flex items-center gap-2">
              <LayoutGrid className="h-4 w-4" />
              {t('المحرر')}
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              {t('إعدادات الصفحة')}
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="editor" className="space-y-4">
            <div className="grid grid-cols-12 gap-6">
              {/* لوحة المكونات */}
              <div className="col-span-3">
                <Card className="h-[calc(100vh-200px)]">
                  <div className="p-4 border-b">
                    <h2 className="font-semibold">{t('المكونات')}</h2>
                  </div>
                  <ScrollArea className="h-[calc(100%-56px)]">
                    <div className="p-4 space-y-3">
                      <ComponentSelector onAddComponent={addComponent} />
                    </div>
                  </ScrollArea>
                </Card>
              </div>
              
              {/* منطقة السحب والإفلات الرئيسية */}
              <div className="col-span-6">
                <Card className="h-[calc(100vh-200px)]">
                  <div className="p-4 border-b flex justify-between items-center">
                    <h2 className="font-semibold">{t('محتوى الصفحة')}</h2>
                    <span className="text-sm text-muted-foreground">
                      {currentPage.components.length} {t('مكون')}
                    </span>
                  </div>
                  <ScrollArea className="h-[calc(100%-56px)] p-4">
                    <DndContext
                      sensors={sensors}
                      collisionDetection={closestCenter}
                      onDragStart={handleDragStart}
                      onDragEnd={handleDragEnd}
                      modifiers={[restrictToWindowEdges]}
                    >
                      <SortableContext
                        items={currentPage.components.map(component => component.id)}
                        strategy={verticalListSortingStrategy}
                      >
                        <div className="space-y-4 p-2 min-h-[400px]">
                          {currentPage.components.length === 0 ? (
                            <EmptyCanvasPlaceholder onAddClick={() => setActiveTab('components')} />
                          ) : (
                            currentPage.components.map(component => (
                              <LandingPageComponentItem
                                key={component.id}
                                component={component}
                                isActive={component.id === activeComponentId}
                                onActivate={() => activateComponent(component.id)}
                                onToggleActive={() => toggleComponentActive(component.id)}
                                onRemove={() => removeComponent(component.id)}
                              />
                            ))
                          )}
                        </div>
                      </SortableContext>
                      
                      <DragOverlay>
                        {draggedComponent && (
                          <div className="opacity-80">
                            <LandingPageComponentItem
                              component={draggedComponent}
                              isActive={false}
                              onActivate={() => {}}
                              onToggleActive={() => {}}
                              onRemove={() => {}}
                              overlay
                            />
                          </div>
                        )}
                      </DragOverlay>
                    </DndContext>
                  </ScrollArea>
                </Card>
              </div>
              
              {/* لوحة الإعدادات */}
              <div className="col-span-3">
                <Card className="h-[calc(100vh-200px)]">
                  <div className="p-4 border-b">
                    <h2 className="font-semibold">
                      {activeComponentId 
                        ? t('إعدادات المكون') 
                        : t('اختر مكونًا للتعديل')}
                    </h2>
                  </div>
                  <ScrollArea className="h-[calc(100%-56px)]">
                    <div className="p-4">
                      {getActiveComponent() ? (
                        <ComponentEditor 
                          component={getActiveComponent()!} 
                          onUpdateSettings={(settings) => updateComponentSettings(activeComponentId!, settings)} 
                        />
                      ) : (
                        <div className="text-center py-8 text-muted-foreground">
                          <Layers className="h-12 w-12 mx-auto mb-4 opacity-20" />
                          <p>{t('اختر مكونًا من القائمة لتعديل إعداداته')}</p>
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </Card>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="settings">
            <Card>
              <CardContent className="p-6">
                <PageSettingsForm 
                  settings={currentPage.settings} 
                  onUpdate={(settings) => setCurrentPage({...currentPage, settings})} 
                />
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </Layout>
  );
};

// مكونات فرعية للمحرر
// ----------------------

// لوحة اختيار المكونات
const ComponentSelector: React.FC<{ onAddComponent: (type: string) => void }> = ({ onAddComponent }) => {
  const componentTypes = [
    { id: 'hero', name: 'هيرو', icon: <Layers className="h-4 w-4" /> },
    { id: 'form', name: 'نموذج', icon: <Settings className="h-4 w-4" /> },
    { id: 'text', name: 'نص', icon: <Layers className="h-4 w-4" /> },
    { id: 'image', name: 'صورة', icon: <Image className="h-4 w-4" /> },
    { id: 'features', name: 'مميزات', icon: <Layers className="h-4 w-4" /> },
    { id: 'testimonial', name: 'آراء العملاء', icon: <Layers className="h-4 w-4" /> }
  ];

  return (
    <div className="space-y-3">
      {componentTypes.map(type => (
        <Button
          key={type.id}
          variant="outline"
          className="w-full justify-start"
          onClick={() => onAddComponent(type.id)}
        >
          <div className="w-8 h-8 bg-muted rounded-lg flex items-center justify-center mr-3">
            {type.icon}
          </div>
          <span>{type.name}</span>
          <Plus className="h-4 w-4 ml-auto" />
        </Button>
      ))}
    </div>
  );
};

// مكون فارغ لعرضه عندما لا توجد مكونات
const EmptyCanvasPlaceholder: React.FC<{ onAddClick: () => void }> = ({ onAddClick }) => (
  <div className="border-2 border-dashed rounded-lg h-[300px] flex flex-col items-center justify-center text-center p-4">
    <Layers className="h-12 w-12 mb-4 opacity-20" />
    <h3 className="font-medium mb-2">صفحة فارغة</h3>
    <p className="text-sm text-muted-foreground mb-4">
      ابدأ بإضافة مكونات جديدة من القائمة على اليمين.
    </p>
    <Button variant="outline" onClick={onAddClick}>
      <Plus className="h-4 w-4 mr-2" />
      إضافة مكون
    </Button>
  </div>
);

// تمثيل مكون قابل للسحب في الصفحة
const LandingPageComponentItem: React.FC<{
  component: LandingPageComponent;
  isActive: boolean;
  onActivate: () => void;
  onToggleActive: () => void;
  onRemove: () => void;
  overlay?: boolean;
}> = ({ component, isActive, onActivate, onToggleActive, onRemove, overlay }) => {
  return (
    <SortableLandingPageItem
      component={component}
      isActive={isActive}
      onActivate={onActivate}
      onToggleActive={onToggleActive}
      onRemove={onRemove}
      overlay={overlay}
    />
  );
};

// الحصول على تسمية نوع المكون
const getComponentTypeLabel = (type: string): string => {
  const types: Record<string, string> = {
    'hero': 'هيرو',
    'form': 'نموذج',
    'text': 'نص',
    'image': 'صورة',
    'features': 'مميزات',
    'testimonial': 'آراء العملاء'
  };
  
  return types[type] || type;
};

// الحصول على معاينة مبسطة للمكون
const getComponentPreview = (component: LandingPageComponent): string => {
  switch (component.type) {
    case 'hero':
      return `${component.settings.title || 'بدون عنوان'}`;
    case 'form':
      return `نموذج: ${component.settings.title || 'بدون عنوان'}`;
    case 'text':
      const text = component.settings.content?.replace(/<[^>]*>?/gm, '') || '';
      return text.length > 40 ? text.substring(0, 40) + '...' : text;
    case 'image':
      return `صورة: ${component.settings.altText || 'بدون وصف'}`;
    case 'features':
      return `${component.settings.title}: ${component.settings.features?.length || 0} ميزة`;
    case 'testimonial':
      return `آراء العملاء: ${component.settings.items?.length || 0} رأي`;
    default:
      return 'معاينة غير متوفرة';
  }
};

// محرر إعدادات المكون
const ComponentEditor: React.FC<{
  component: LandingPageComponent;
  onUpdateSettings: (settings: Record<string, any>) => void;
}> = ({ component, onUpdateSettings }) => {
  // محتوى هذا المكون سيكون مخصصًا حسب نوع المكون
  return (
    <div>
      <h3 className="font-medium mb-4">{getComponentTypeLabel(component.type)}</h3>
      
      {component.type === 'form' && (
        <FormComponentEditor 
          settings={{
            title: component.settings.title || '',
            productId: component.settings.productId || null,
            formId: component.settings.formId || null,
            buttonText: component.settings.buttonText || 'إرسال',
            backgroundColor: component.settings.backgroundColor || '#f9f9f9',
            ...component.settings
          }} 
          onUpdate={onUpdateSettings} 
        />
      )}
      
      {component.type === 'image' && (
        <ImageComponentEditor 
          settings={{
            imageUrl: component.settings.imageUrl || '',
            altText: component.settings.altText || '',
            caption: component.settings.caption || '',
            maxWidth: component.settings.maxWidth || '100%',
            alignment: component.settings.alignment || 'center',
            border: component.settings.border || false,
            borderColor: component.settings.borderColor || '#000000',
            borderWidth: component.settings.borderWidth || 1,
            borderRadius: component.settings.borderRadius || 0,
            shadow: component.settings.shadow || false,
            shadowIntensity: component.settings.shadowIntensity || 'medium',
            overlay: component.settings.overlay || false,
            overlayColor: component.settings.overlayColor || '#000000',
            overlayOpacity: component.settings.overlayOpacity || 50,
            onClick: component.settings.onClick || 'none',
            linkUrl: component.settings.linkUrl || '',
          }} 
          onUpdate={onUpdateSettings} 
        />
      )}
      
      {/* هنا ستضاف محررات للأنواع الأخرى */}
      {component.type !== 'form' && component.type !== 'image' && (
        <div className="text-sm text-muted-foreground">
          محرر هذا النوع سيتم إضافته لاحقًا.
        </div>
      )}
    </div>
  );
};

// نموذج إعدادات الصفحة
const PageSettingsForm: React.FC<{
  settings: {
    title: string;
    description: string;
    keywords: string;
    isPublished: boolean;
  };
  onUpdate: (settings: {
    title: string;
    description: string;
    keywords: string;
    isPublished: boolean;
  }) => void;
}> = ({ settings, onUpdate }) => {
  console.log('====> عرض نموذج إعدادات الصفحة بالبيانات:', settings);
  
  // تتبع التغييرات في البيانات
  const handleSettingChange = (newSettings: typeof settings) => {
    console.log('====> تغيير الإعدادات من:', settings, 'إلى:', newSettings);
    onUpdate(newSettings);
  };
  
  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="text-sm font-medium">عنوان الصفحة</label>
        <input 
          type="text" 
          className="w-full p-2 border rounded-md" 
          value={settings.title || ''} 
          onChange={(e) => handleSettingChange({ ...settings, title: e.target.value })}
        />
        <p className="text-xs text-muted-foreground">
          سيظهر هذا العنوان في شريط عنوان المتصفح ونتائج البحث.
        </p>
      </div>
      
      <div className="space-y-2">
        <label className="text-sm font-medium">وصف الصفحة</label>
        <textarea 
          className="w-full p-2 border rounded-md min-h-[100px]" 
          value={settings.description || ''} 
          onChange={(e) => handleSettingChange({ ...settings, description: e.target.value })}
        />
        <p className="text-xs text-muted-foreground">
          وصف موجز للصفحة يظهر في نتائج البحث.
        </p>
      </div>
      
      <div className="space-y-2">
        <label className="text-sm font-medium">الكلمات المفتاحية</label>
        <input 
          type="text" 
          className="w-full p-2 border rounded-md" 
          value={settings.keywords || ''} 
          onChange={(e) => handleSettingChange({ ...settings, keywords: e.target.value })}
        />
        <p className="text-xs text-muted-foreground">
          الكلمات المفتاحية مفصولة بفواصل.
        </p>
      </div>
      
      <div className="flex items-center space-x-2">
        <input 
          type="checkbox" 
          id="isPublished" 
          checked={settings.isPublished || false} 
          onChange={(e) => handleSettingChange({ ...settings, isPublished: e.target.checked })}
        />
        <label htmlFor="isPublished" className="text-sm font-medium">
          نشر الصفحة للزوار
        </label>
      </div>
    </div>
  );
};

export default LandingPageBuilder; 
import React, { Suspense, useRef, useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { Loader2 } from 'lucide-react';

// Import core components (lightweight)
import SmartProviderWrapper from './components/routing/SmartProviderWrapper';
import EarlyDomainDetector from './components/routing/EarlyDomainDetector';
import StorePage from './components/store/StorePage';
import NetworkErrorHandler from './components/NetworkErrorHandler';
import ErrorBoundary from './components/ErrorBoundary';

// Lazy load non-critical components
const LocalStorageMonitor = React.lazy(() => import('./components/auth/LocalStorageMonitor').then(module => ({ default: module.LocalStorageMonitor })));

// Import app components
import { AppCore, CategoryRedirect } from './app-components/AppComponents';
import { DashboardRoutes } from './app-components/DashboardRoutes';

// Lazy load all route components
const PublicRoutes = React.lazy(() => import('./app-components/RouteComponents').then(module => ({ default: module.PublicRoutes })));
const SuperAdminRoutes = React.lazy(() => import('./app-components/RouteComponents').then(module => ({ default: module.SuperAdminRoutes })));
const CallCenterRoutes = React.lazy(() => import('./app-components/RouteComponents').then(module => ({ default: module.CallCenterRoutes })));
// ุนุฒู POS ุฅูู ููู ูุณุชูู ูุชูููู ุงุญุชูุงู ุงูุฏูุฌ ูุน ูุณุงุฑุงุช ุนุงูุฉ
const POSRoutes = React.lazy(() => import('./app-components/POSRoutesStandalone'));

// Import lazy routes and auth components directly
import * as LazyRoutes from './app-components/LazyRoutes';
const PublicRoute = React.lazy(() => import('./components/auth/PublicRoute'));
const RoleBasedRedirect = React.lazy(() => import('./components/auth/RoleBasedRedirect'));

// ๐ Import optimized lazy loading components
import { LazyComponents } from './components/lazy/LazyHeavyComponents';
import { LazyLoadingWrapper } from './components/ui/LazyLoadingWrapper';
// import { ConsoleRemover } from './components/ui/ConsoleRemover';

// ๐ฏ ูููู ุชุญููู ูุญุณู ููุชุทุจูู - ูุนุฑุถ ุงููุชุฌุฑ ูุจุงุดุฑุฉ ุนูุฏ ุงููุดู ุงููุจูุฑ
const AppLoader = () => {
  // ๐ฅ ุงููุดู ุงููุจูุฑ ูููุทุงู
  const detectDomainEarly = () => {
    try {
      const hostname = window.location.hostname;
      
      // ูุญุต ุงููุทุงูุงุช ุงูุนุงูุฉ
      const isPublicDomain = ['ktobi.online', 'www.ktobi.online', 'stockiha.com', 'www.stockiha.com'].includes(hostname);
      
      if (!isPublicDomain && !hostname.includes('localhost')) {
        // ูุทุงู ูุฎุตุต ุฃู subdomain - ุนุฑุถ ุงููุชุฌุฑ ูุจุงุดุฑุฉ
        return <StorePage />;
      }
    } catch (error) {
      // ุฎุทุฃ ูู ุงููุดู ุงููุจูุฑ ูููุทุงู
    }
    
    // ุดุงุดุฉ ุงูุชุญููู ุงูุนุงูุฉ - ูุญุณูุฉ
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="relative">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <div className="absolute inset-0 rounded-full border-2 border-primary/20"></div>
          </div>
          <div className="text-center">
            <h3 className="text-lg font-semibold text-foreground mb-2">ุณุทููููุง</h3>
            <p className="text-sm text-muted-foreground">ุฌุงุฑู ุชุญููู ุงููุธุงู...</p>
          </div>
        </div>
      </div>
    );
  };
  
  // ุชุดุบูู ุงููุดู ููุฑุงู
  return detectDomainEarly();
};

// ๐ ูููู ุชุญููู ุงูุตูุญุงุช
const PageLoader = ({ message }: { message?: string }) => (
  <div className="flex items-center justify-center min-h-[50vh] bg-background">
    <div className="flex flex-col items-center gap-4">
      <Loader2 className="h-8 w-8 animate-spin text-primary" />
      <p className="text-sm text-muted-foreground">
        {message || 'ุฌุงุฑู ุชุญููู ุงูุตูุญุฉ...'}
      </p>
    </div>
  </div>
);

// Import cleanup hook
const useAuthStateCleanup = () => {
  React.useEffect(() => {
    // ุชุทููุฑ ุงูุจูุงูุงุช ุงููุชุถุงุฑุจุฉ ุนูุฏ ุจุฏุก ุงูุชุทุจูู
    const keysToClean = ['lastLoginRedirect', 'loginRedirectCount', 'authErrorCount'];
    keysToClean.forEach(key => sessionStorage.removeItem(key));
  }, []);
};

// ๐ ุงููููู ุงูุฑุฆูุณู ููุชุทุจูู
const App = () => {
  // ๐ฅ ุงุณุชุฎุฏุงู useRef ูููุน ุฅุนุงุฏุฉ ุงูุฅูุดุงุก ุงููุชูุฑุฑ
  const renderCount = useRef(0);
  const isInitialized = useRef(false);
  
  // ุชุทููุฑ ุงูุญุงูุฉ ุงููุฏููุฉ ุนูุฏ ุจุฏุก ุงูุชุทุจูู
  useAuthStateCleanup();

  renderCount.current++;

  // ๐ฅ ููุน ุฅุนุงุฏุฉ ุงูุฅูุดุงุก ุงููุชูุฑุฑ
  useEffect(() => {
    if (isInitialized.current) {
      return;
    }
    isInitialized.current = true;
  }, []);

  // ูุนุงูุฌ ุงููุดู ุงููุจูุฑ ูููุทุงู
  const handleDomainDetected = React.useCallback((domainInfo: any) => {
    
    // ุฅุฐุง ูุงู ูุทุงู ูุฎุตุตุ ูููููุง ุชุญุณูู ุงูุชุญููู
    if (domainInfo.isCustomDomain) {
      // ุชุญุฏูุซ ุนููุงู ุงูุตูุญุฉ ูุจูุฑุงู
      if (domainInfo.subdomain) {
        document.title = `ูุชุฌุฑ ${domainInfo.subdomain} - ุณุทููููุง`;
      }
      
      // ุฅุฑุณุงู event ูููุดู ุนู ุงููุทุงู
      window.dispatchEvent(new CustomEvent('bazaar:domain-detected', {
        detail: domainInfo
      }));
    }
  }, []);
  
  return (
    <ErrorBoundary>
      <NetworkErrorHandler>
        <EarlyDomainDetector onDomainDetected={handleDomainDetected}>
          {/* <ConsoleRemover /> */}
          <SmartProviderWrapper>
          <AppCore>
            <Routes>
              {/* ูุณุงุฑ ุฅุนุงุฏุฉ ุงูุชูุฌูู ูููุฆุงุช */}
              <Route path="/category/:categoryId" element={<CategoryRedirect />} />
              
              {/* ูุณุงุฑุงุช ููุญุฉ ุงูุชุญูู - Lazy Loading */}
              {DashboardRoutes()}
              
              {/* ุงููุณุงุฑุงุช ุงูุนุงูุฉ - Lazy Loading */}
              <Route path="/*" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุงูุตูุญุฉ..." />}>
                  <PublicRoutes />
                </Suspense>
              } />
              
              {/* ูุณุงุฑุงุช ุงูุชูุซูู - Lazy Loading */}
              <Route path="/login" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุตูุญุฉ ุงูุฏุฎูู..." />}>
                  <PublicRoute>
                    <LazyRoutes.LoginForm />
                  </PublicRoute>
                </Suspense>
              } />
              <Route path="/forgot-password" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุตูุญุฉ ูุณูุช ูููุฉ ุงููุฑูุฑ..." />}>
                  <PublicRoute>
                    <LazyRoutes.ForgotPasswordForm />
                  </PublicRoute>
                </Suspense>
              } />
              <Route path="/reset-password" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุตูุญุฉ ุฅุนุงุฏุฉ ุชุนููู ูููุฉ ุงููุฑูุฑ..." />}>
                  <PublicRoute>
                    <LazyRoutes.ResetPasswordForm />
                  </PublicRoute>
                </Suspense>
              } />
              <Route path="/admin/signup" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุงูุชุณุฌูู..." />}>
                  <PublicRoute>
                    <LazyRoutes.AdminSignup />
                  </PublicRoute>
                </Suspense>
              } />
              <Route path="/tenant/signup" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุงูุชุณุฌูู..." />}>
                  <PublicRoute>
                    <LazyRoutes.TenantSignup />
                  </PublicRoute>
                </Suspense>
              } />
              <Route path="/redirect" element={
                <Suspense fallback={<PageLoader />}>
                  <RoleBasedRedirect />
                </Suspense>
              } />
              <Route path="/super-admin/login" element={
                <Suspense fallback={<PageLoader />}>
                  <LazyRoutes.SuperAdminLogin />
                </Suspense>
              } />
              <Route path="/setup-organization" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ุฅุนุฏุงุฏ ุงููุคุณุณุฉ..." />}>
                  <LazyRoutes.SetupOrganization />
                </Suspense>
              } />
              
              {/* ูุณุงุฑุงุช Super Admin */}
              <Route path="/super-admin/*" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ููุญุฉ ุงูุฅุฏุงุฑุฉ ุงูุนููุง..." />}>
                  <SuperAdminRoutes />
                </Suspense>
              } />
              
              {/* ูุณุงุฑุงุช Call Center */}
              <Route path="/call-center/*" element={
                <Suspense fallback={<PageLoader message="ุฌุงุฑู ุชุญููู ูุฑูุฒ ุงูุงุชุตุงู..." />}>
                  <CallCenterRoutes />
                </Suspense>
              } />
              
              {/* ูุณุงุฑ ููุทุฉ ุงูุจูุน - ูุญุณู */}
              <Route path="/pos/*" element={
                <LazyLoadingWrapper message="ุฌุงุฑู ุชุญููู ููุทุฉ ุงูุจูุน...">
                  <POSRoutes />
                </LazyLoadingWrapper>
              } />
              
              {/* ูุณุงุฑ 404 */}
              <Route path="*" element={
                <Suspense fallback={<AppLoader />}>
                  {React.createElement(React.lazy(() => import('./pages/NotFound')))}
                </Suspense>
              } />
            </Routes>
            
            {/* ููููุงุช ุงูุชุทููุฑ - lazy loading */}
            {import.meta.env.DEV && (
              <Suspense fallback={null}>
                <LocalStorageMonitor />
              </Suspense>
            )}
          </AppCore>
        </SmartProviderWrapper>
      </EarlyDomainDetector>
    </NetworkErrorHandler>
  </ErrorBoundary>
  );
};

export default App;

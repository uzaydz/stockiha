-- ุฅุตูุงุญ ูุดููุฉ ุชุญุฏูุซ ูุฎุฒูู ุงูุฃููุงู ุนูุฏ ุดุฑุงุก ููุชุฌ ุจููุงุณ
-- ุงูุชุงุฑูุฎ: 2025-01-15
-- ุงููุดููุฉ: ุนูุฏ ุดุฑุงุก ููุชุฌ ุจููุงุณ ูุนููุ ูุชู ุฎุตู ุงููุฎุฒูู ูู ุงูููุงุณ ูููู ูุง ูุชู ุชุญุฏูุซ ูููุฉ ุงูููู

-- 1. ุฅูุดุงุก ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู ุจูุงุกู ุนูู ูุฌููุน ุงูููุงุณุงุช
CREATE OR REPLACE FUNCTION recalculate_color_quantity(p_color_id UUID)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_total_quantity INTEGER := 0;
BEGIN
    -- ุญุณุงุจ ูุฌููุน ูููุงุช ุฌููุน ุงูููุงุณุงุช ููุฐุง ุงูููู
    SELECT COALESCE(SUM(quantity), 0)
    INTO v_total_quantity
    FROM product_sizes 
    WHERE color_id = p_color_id;
    
    -- ุชุญุฏูุซ ูููุฉ ุงูููู
    UPDATE product_colors 
    SET quantity = v_total_quantity,
        updated_at = NOW()
    WHERE id = p_color_id;
    
    RAISE NOTICE '๐ [recalculate_color_quantity] ุชู ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู % - ุงููููุฉ ุงูุฌุฏูุฏุฉ: %', p_color_id, v_total_quantity;
END;
$$;

-- 2. ุฅูุดุงุก ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุจูุงุกู ุนูู ูุฌููุน ุงูุฃููุงู
CREATE OR REPLACE FUNCTION recalculate_product_quantity(p_product_id UUID)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_total_quantity INTEGER := 0;
    v_has_variants BOOLEAN := FALSE;
BEGIN
    -- ุงูุชุญูู ูู ูุฌูุฏ ูุชุบูุฑุงุช ููููุชุฌ
    SELECT has_variants INTO v_has_variants
    FROM products 
    WHERE id = p_product_id;
    
    -- ุฅุฐุง ูุงู ุงูููุชุฌ ูู ูุชุบูุฑุงุชุ ุงุญุณุจ ูู ูุฌููุน ุงูุฃููุงู
    IF v_has_variants THEN
        SELECT COALESCE(SUM(quantity), 0)
        INTO v_total_quantity
        FROM product_colors 
        WHERE product_id = p_product_id;
        
        -- ุชุญุฏูุซ ูููุฉ ุงูููุชุฌ
        UPDATE products 
        SET stock_quantity = v_total_quantity,
            updated_at = NOW(),
            last_inventory_update = NOW()
        WHERE id = p_product_id;
        
        RAISE NOTICE '๐ [recalculate_product_quantity] ุชู ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ % ูู ุงูุฃููุงู - ุงููููุฉ ุงูุฌุฏูุฏุฉ: %', p_product_id, v_total_quantity;
    END IF;
END;
$$;

-- 3. ุชุญุฏูุซ ุฏุงูุฉ bypass_rls_update_product_size_quantity ูุชุดูู ุฅุนุงุฏุฉ ุญุณุงุจ ุงูููู ูุงูููุชุฌ
CREATE OR REPLACE FUNCTION bypass_rls_update_product_size_quantity(p_size_id UUID, p_quantity_to_reduce INTEGER)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_color_id UUID;
    v_product_id UUID;
    v_current_quantity INTEGER;
    v_new_quantity INTEGER;
BEGIN
    -- ุงูุญุตูู ุนูู ูุนุฑู ุงูููู ูุงูููุชุฌ ูู ุงูููุงุณ
    SELECT ps.color_id, pc.product_id, ps.quantity
    INTO v_color_id, v_product_id, v_current_quantity
    FROM product_sizes ps
    JOIN product_colors pc ON ps.color_id = pc.id
    WHERE ps.id = p_size_id;
    
    IF v_color_id IS NULL THEN
        RAISE EXCEPTION 'ุงูููุงุณ ุบูุฑ ููุฌูุฏ ุฃู ูุง ููุชูู ูุฃู ููู';
        RETURN;
    END IF;
    
    -- ุญุณุงุจ ุงููููุฉ ุงูุฌุฏูุฏุฉ
    v_new_quantity := GREATEST(0, v_current_quantity - p_quantity_to_reduce);
    
    -- ุชุนุทูู RLS ูุคูุชุงู
    SET row_security = off;
    
    -- ุชุญุฏูุซ ูููุฉ ุงูููุงุณ
    UPDATE product_sizes 
    SET quantity = v_new_quantity,
        updated_at = NOW()
    WHERE id = p_size_id;
    
    RAISE NOTICE '๐ [bypass_rls_update_product_size_quantity] ุชู ุชุญุฏูุซ ูููุฉ ุงูููุงุณ % ูู % ุฅูู %', p_size_id, v_current_quantity, v_new_quantity;
    
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู
    PERFORM recalculate_color_quantity(v_color_id);
    
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ
    PERFORM recalculate_product_quantity(v_product_id);
    
    -- ุฅุนุงุฏุฉ ุชูุนูู RLS
    SET row_security = on;
    
EXCEPTION WHEN OTHERS THEN
    -- ุฅุนุงุฏุฉ ุชูุนูู RLS ูู ุญุงูุฉ ุงูุฎุทุฃ
    SET row_security = on;
    RAISE;
END;
$$;

-- 4. ุฅุถุงูุฉ trigger ูุฅุนุงุฏุฉ ุญุณุงุจ ูููุงุช ุงูุฃููุงู ุชููุงุฆูุงู ุนูุฏ ุชุญุฏูุซ ุงูููุงุณุงุช
CREATE OR REPLACE FUNCTION trigger_recalculate_color_quantity()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู ุนูุฏ ุชุญุฏูุซ ุฃู ุญุฐู ููุงุณ
    IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
        PERFORM recalculate_color_quantity(OLD.color_id);
        
        -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุฃูุถุงู
        DECLARE
            v_product_id UUID;
        BEGIN
            SELECT product_id INTO v_product_id FROM product_colors WHERE id = OLD.color_id;
            IF v_product_id IS NOT NULL THEN
                PERFORM recalculate_product_quantity(v_product_id);
            END IF;
        END;
    END IF;
    
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู ุนูุฏ ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ููุงุณ
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        PERFORM recalculate_color_quantity(NEW.color_id);
        
        -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุฃูุถุงู
        DECLARE
            v_product_id UUID;
        BEGIN
            SELECT product_id INTO v_product_id FROM product_colors WHERE id = NEW.color_id;
            IF v_product_id IS NOT NULL THEN
                PERFORM recalculate_product_quantity(v_product_id);
            END IF;
        END;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$;

-- 5. ุฅูุดุงุก trigger ุนูู ุฌุฏูู product_sizes
DROP TRIGGER IF EXISTS recalculate_color_quantity_trigger ON product_sizes;
CREATE TRIGGER recalculate_color_quantity_trigger
    AFTER INSERT OR UPDATE OR DELETE ON product_sizes
    FOR EACH ROW
    EXECUTE FUNCTION trigger_recalculate_color_quantity();

-- 6. ุฅุถุงูุฉ trigger ูุฅุนุงุฏุฉ ุญุณุงุจ ูููุงุช ุงูููุชุฌุงุช ุชููุงุฆูุงู ุนูุฏ ุชุญุฏูุซ ุงูุฃููุงู
CREATE OR REPLACE FUNCTION trigger_recalculate_product_quantity()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุนูุฏ ุชุญุฏูุซ ุฃู ุญุฐู ููู
    IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
        PERFORM recalculate_product_quantity(OLD.product_id);
    END IF;
    
    -- ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุนูุฏ ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ููู
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        PERFORM recalculate_product_quantity(NEW.product_id);
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$;

-- 7. ุฅูุดุงุก trigger ุนูู ุฌุฏูู product_colors
DROP TRIGGER IF EXISTS recalculate_product_quantity_trigger ON product_colors;
CREATE TRIGGER recalculate_product_quantity_trigger
    AFTER INSERT OR UPDATE OR DELETE ON product_colors
    FOR EACH ROW
    EXECUTE FUNCTION trigger_recalculate_product_quantity();

-- 8. ููุญ ุงูุฃุฐููุงุช ุงููุงุฒูุฉ
GRANT EXECUTE ON FUNCTION recalculate_color_quantity(UUID) TO anon;
GRANT EXECUTE ON FUNCTION recalculate_color_quantity(UUID) TO authenticated;
GRANT EXECUTE ON FUNCTION recalculate_color_quantity(UUID) TO service_role;

GRANT EXECUTE ON FUNCTION recalculate_product_quantity(UUID) TO anon;
GRANT EXECUTE ON FUNCTION recalculate_product_quantity(UUID) TO authenticated;
GRANT EXECUTE ON FUNCTION recalculate_product_quantity(UUID) TO service_role;

GRANT EXECUTE ON FUNCTION bypass_rls_update_product_size_quantity(UUID, INTEGER) TO anon;
GRANT EXECUTE ON FUNCTION bypass_rls_update_product_size_quantity(UUID, INTEGER) TO authenticated;
GRANT EXECUTE ON FUNCTION bypass_rls_update_product_size_quantity(UUID, INTEGER) TO service_role;

-- ุชุญุฏูุซ cache Supabase
NOTIFY pgrst, 'reload schema';

-- ุชุนููู ุชูุถูุญู
COMMENT ON FUNCTION recalculate_color_quantity IS 'ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููู ุจูุงุกู ุนูู ูุฌููุน ูููุงุช ุงูููุงุณุงุช';
COMMENT ON FUNCTION recalculate_product_quantity IS 'ุฅุนุงุฏุฉ ุญุณุงุจ ูููุฉ ุงูููุชุฌ ุจูุงุกู ุนูู ูุฌููุน ูููุงุช ุงูุฃููุงู';
COMMENT ON FUNCTION bypass_rls_update_product_size_quantity IS 'ุชุญุฏูุซ ูููุฉ ุงูููุงุณ ูุน ุฅุนุงุฏุฉ ุญุณุงุจ ุงูููู ูุงูููุชุฌ ุชููุงุฆูุงู'; 
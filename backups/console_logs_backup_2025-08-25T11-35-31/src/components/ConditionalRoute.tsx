import React, { useMemo } from 'react';
import { useAppsData, useIsAppEnabled, useSuperUnifiedData } from '@/context/SuperUnifiedDataContext';
import { useApps } from '@/context/AppsContext';
import { Navigate } from 'react-router-dom';

interface ConditionalRouteProps {
  appId: string;
  children: React.ReactNode;
  fallbackPath?: string;
}

/**
 * ┘Е┘Г┘И┘Ж ┘Е╪н╪│┘Ж ┘Д╪╣╪▒╪╢ ╪з┘Д┘Е╪н╪к┘И┘Й ╪и╪┤┘Г┘Д ┘Е╪┤╪▒┘И╪╖ ╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ╪н╪з┘Д╪й ╪к┘Б╪╣┘К┘Д ╪з┘Д╪к╪╖╪и┘К┘В
 * ┘К╪│╪к╪о╪п┘Е memoization ┘Д╪к╪н╪│┘К┘Ж ╪з┘Д╪г╪п╪з╪б
 * ┘К╪╣┘Е┘Д ┘Е╪╣ AppsContext ┘Г╪и╪п┘К┘Д ╪╣┘Ж╪п┘Е╪з ┘Д╪з ┘К┘Г┘И┘Ж SuperUnifiedDataProvider ┘Е╪к╪з╪н╪з┘Л
 */
const ConditionalRoute: React.FC<ConditionalRouteProps> = ({ 
  appId, 
  children, 
  fallbackPath = '/dashboard' 
}) => {
  // ┘Е╪н╪з┘И┘Д╪й ╪з╪│╪к╪о╪п╪з┘Е SuperUnifiedDataContext ╪г┘И┘Д╪з┘Л
  let organizationApps: any[] = [];
  let isLoading = false;
  let isEnabled = false;

  try {
    const superUnifiedData = useSuperUnifiedData();
    const appsData = useAppsData();
    organizationApps = appsData.organizationApps || [];
    isLoading = superUnifiedData.isLoading;
    isEnabled = useIsAppEnabled(appId);
  } catch (error) {
    // ╪е╪░╪з ┘Д┘Е ┘К┘Г┘Ж SuperUnifiedDataProvider ┘Е╪к╪з╪н╪з┘Л╪М ╪з╪│╪к╪о╪п┘Е AppsContext
    try {
      const appsContext = useApps();
      organizationApps = appsContext.organizationApps || [];
      isLoading = appsContext.isLoading;
      isEnabled = appsContext.isAppEnabled(appId);
    } catch (appsError) {
      // ╪е╪░╪з ┘Д┘Е ┘К┘Г┘Ж ╪г┘К ┘Е┘Ж ╪з┘Д╪│┘К╪з┘В┘К┘Ж ┘Е╪к╪з╪н╪з┘Л╪М ╪з╪│╪к╪о╪п┘Е ┘В┘К┘Е ╪з┘Б╪к╪▒╪з╪╢┘К╪й
      console.warn('тЪая╕П [ConditionalRoute] ┘Д╪з ┘К┘Е┘Г┘Ж ╪з┘Д┘И╪╡┘И┘Д ┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪к╪╖╪и┘К┘В╪з╪к:', appsError);
      organizationApps = [];
      isLoading = false;
      isEnabled = false;
    }
  }

  // ╪з┘Ж╪к╪╕╪з╪▒ ╪к╪н┘Е┘К┘Д ╪з┘Д╪и┘К╪з┘Ж╪з╪к ┘В╪и┘Д ╪з╪к╪о╪з╪░ ┘В╪▒╪з╪▒
  if (isLoading || organizationApps.length === 0) {
    // ╪╣╪▒╪╢ ╪┤╪з╪┤╪й ╪к╪н┘Е┘К┘Д ╪и╪│┘К╪╖╪й ╪г╪л┘Ж╪з╪б ╪м┘Д╪и ╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪к╪╖╪и┘К┘В╪з╪к
    return (
      <div className="flex items-center justify-center min-h-[200px]">
        <div className="flex items-center gap-3">
          <div className="animate-spin rounded-full h-6 w-6 border-2 border-primary border-t-transparent"></div>
          <span className="text-sm text-muted-foreground">╪м╪з╪▒┘К ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪к╪╖╪и┘К┘В...</span>
        </div>
      </div>
    );
  }

  // ╪е╪░╪з ┘Д┘Е ┘К┘Г┘Ж ╪з┘Д╪к╪╖╪и┘К┘В ┘Е┘Б╪╣┘С┘Д╪М ╪е╪╣╪з╪п╪й ╪к┘И╪м┘К┘З ╪е┘Д┘Й ╪з┘Д┘Е╪│╪з╪▒ ╪з┘Д╪з┘Б╪к╪▒╪з╪╢┘К
  if (!isEnabled) {
    if (import.meta.env.DEV) {
      console.log(`ЁЯЪл [ConditionalRoute] ╪з┘Д╪к╪╖╪и┘К┘В ${appId} ╪║┘К╪▒ ┘Е┘Б╪╣┘Д`);
    }
    return <Navigate to={fallbackPath} replace />;
  }

  // ╪е╪░╪з ┘Г╪з┘Ж ╪з┘Д╪к╪╖╪и┘К┘В ┘Е┘Б╪╣┘Д╪М ╪╣╪▒╪╢ ╪з┘Д┘Е╪н╪к┘И┘Й ╪з┘Д╪╣╪з╪п┘К
  return <>{children}</>;
};

export default ConditionalRoute;

import { useState, useRef, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { AlertCircle, ArrowUp } from "lucide-react";
import { motion } from "framer-motion";
import { processOrder } from "@/api/store";
import { useTenant } from "@/context/TenantContext";
import { supabase } from "@/lib/supabase";
import { Form } from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/use-toast";
import * as z from "zod"; // إضافة استيراد z لتعديل المخطط ديناميكيًا

// Import components and types from sub-components
import {
  OrderSuccess,
  PersonalInfoFields,
  DeliveryInfoFields,
  CustomFormFields,
  OrderSummary,
  OrderFormProps,
  OrderFormValues,
  orderFormSchema,
  DELIVERY_COMPANIES
} from "./order-form";

/**
 * OrderForm Component
 * 
 * نموذج إتمام الطلب المحسّن مع دعم النماذج المخصصة
 */
const OrderForm = ({
  productId,
  productColorId,
  productSizeId,
  sizeName,
  price,
  deliveryFee: initialDeliveryFee,
  quantity,
  customFields = []
}: OrderFormProps) => {
  const { currentOrganization } = useTenant();
  const formRef = useRef<HTMLFormElement>(null);
  const submitButtonRef = useRef<HTMLButtonElement>(null);
  
  // State
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formSubmitted, setFormSubmitted] = useState(false);
  const [orderNumber, setOrderNumber] = useState("");
  const [selectedDeliveryCompany, setSelectedDeliveryCompany] = useState<string>("yalidine");
  const [orderError, setOrderError] = useState<string | null>(null);
  const [formValidationTriggered, setFormValidationTriggered] = useState(false);
  
  // Check if we have a custom form
  const hasCustomForm = customFields && customFields.length > 0 && customFields.some(field => field.isVisible);
  
  // تحديد الحقول المتوفرة في النموذج المخصص
  const getAvailableCustomFields = () => {
    if (!hasCustomForm) return new Set<string>();
    
    const fieldNames = new Set<string>();
    customFields.filter(field => field.isVisible).forEach(field => {
      fieldNames.add(field.name);
    });
    
    return fieldNames;
  };
  
  // إنشاء مخطط تحقق مخصص يعتمد على الحقول المتوفرة
  const getCustomValidationSchema = () => {
    const availableFields = getAvailableCustomFields();
    let schema = z.object({});
    
    // إضافة حقول إلزامية فقط للحقول الموجودة في النموذج المخصص
    if (availableFields.has('fullName')) {
      schema = schema.extend({
        fullName: z.string().min(3, { message: "الإسم واللقب يجب أن يحتوي على 3 أحرف على الأقل" }),
      });
    } else {
      schema = schema.extend({
        fullName: z.string().optional(),
      });
    }
    
    if (availableFields.has('phone')) {
      schema = schema.extend({
        phone: z.string().min(9, { message: "يرجى إدخال رقم هاتف صحيح" }),
      });
    } else {
      schema = schema.extend({
        phone: z.string().optional(),
      });
    }
    
    if (availableFields.has('province')) {
      schema = schema.extend({
        province: z.string().min(1, { message: "يرجى اختيار الولاية" }),
      });
    } else {
      schema = schema.extend({
        province: z.string().optional(),
      });
    }
    
    if (availableFields.has('municipality')) {
      schema = schema.extend({
        municipality: z.string().min(1, { message: "يرجى إدخال البلدية" }),
      });
    } else {
      schema = schema.extend({
        municipality: z.string().optional(),
      });
    }
    
    if (availableFields.has('address')) {
      schema = schema.extend({
        address: z.string().min(5, { message: "العنوان يجب أن يحتوي على 5 أحرف على الأقل" }),
      });
    } else {
      schema = schema.extend({
        address: z.string().optional(),
      });
    }
    
    // إضافة الحقول الأخرى غير المرتبطة بالنموذج المخصص
    schema = schema.extend({
      deliveryCompany: z.string().optional(),
      deliveryOption: z.string().optional(),
      paymentMethod: z.string().optional(),
      notes: z.string().optional(),
    });
    
    return schema;
  };
  
  // Form with validation - استخدام المخطط المخصص للنموذج المخصص
  const form = useForm<OrderFormValues>({
    resolver: hasCustomForm ? 
      zodResolver(getCustomValidationSchema()) :
      zodResolver(orderFormSchema),
    defaultValues: {
      fullName: "",
      phone: "",
      province: "",
      municipality: "",
      address: "",
      deliveryCompany: "yalidine",
      deliveryOption: "home",
      paymentMethod: "cash_on_delivery",
      notes: "",
    },
    mode: "onTouched", // تحقق من صحة البيانات عند لمس الحقل
  });

  // مراقبة حالة النموذج وعرض أخطاء التحقق
  useEffect(() => {
    if (formValidationTriggered) {
      const subscription = form.watch(() => {
        // تحقق من صحة جميع الحقول عند تغيير أي حقل بعد محاولة التقديم الأولى
        form.trigger();
      });
      
      return () => subscription.unsubscribe();
    }
  }, [form, formValidationTriggered]);

  // إعداد مستمع الحدث لزر تأكيد الطلب - تعديل لمنع الحلقة اللانهائية
  useEffect(() => {
    // تعريف دالة معالجة نقرة زر التأكيد
    const handleSubmitButtonClick = () => {
      if (isSubmitting) return; // تجنب النقرات المتعددة
      console.log("تم النقر على زر تأكيد الطلب");
      
      if (formRef.current) {
        // محاكاة تقديم النموذج
        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
        formRef.current.dispatchEvent(submitEvent);
      }
    };
    
    // البحث عن زر التأكيد في الصفحة وإضافة مستمع الحدث
    const submitButton = document.querySelector('button[type="submit"]');
    if (submitButton && !submitButtonRef.current) {
      submitButton.addEventListener('click', handleSubmitButtonClick);
      
      // حفظ مرجع الزر
      submitButtonRef.current = submitButton as HTMLButtonElement;
    }
    
    // إزالة مستمع الحدث عند تدمير المكون
    return () => {
      if (submitButton && submitButtonRef.current) {
        submitButton.removeEventListener('click', handleSubmitButtonClick);
        submitButtonRef.current = null;
      }
    };
  }, [isSubmitting]);

  /**
   * collectCustomFormData
   * تجميع البيانات من النموذج المخصص
   */
  const collectCustomFormData = (): Record<string, any> | null => {
    if (!hasCustomForm || !formRef.current) return null;
    
    console.log("بدء تجميع بيانات النموذج المخصص");
    const formData = new FormData(formRef.current);
    const customFormData: Record<string, any> = {};
    
    // جمع بيانات الحقول المخصصة
    customFields.filter(field => field.isVisible).forEach(field => {
      const fieldName = `custom_${field.name}`;
      console.log(`محاولة تجميع حقل: ${fieldName}`);
      
      if (field.type === 'checkbox') {
        // للحقول متعددة الاختيار، نجمع القيم كمصفوفة
        const checkboxValues = formData.getAll(`${fieldName}[]`);
        console.log(`قيم الاختيارات لـ ${fieldName}:`, checkboxValues);
        if (checkboxValues.length > 0) {
          customFormData[field.name] = checkboxValues;
        }
      } else {
        const value = formData.get(fieldName);
        console.log(`قيمة ${fieldName}:`, value);
        if (value !== null && value !== "") {
          customFormData[field.name] = value;
          
          // نقل البيانات المدخلة إلى نموذج react-hook-form إذا كانت حقولاً أساسية
          if (field.name === 'fullName' || field.name === 'phone' || field.name === 'province' || 
              field.name === 'municipality' || field.name === 'address') {
            form.setValue(field.name as any, value as string);
          }
        }
      }
      
      // إضافة معلومات وصفية للحقل
      if (!customFormData.fieldLabels) {
        customFormData.fieldLabels = {};
      }
      customFormData.fieldLabels[field.name] = field.label;
    });
    
    console.log("بيانات النموذج المخصص المجمعة:", customFormData);
    return customFormData;
  };

  /**
   * نقل البيانات من النموذج المخصص إلى نموذج react-hook-form
   */
  const transferCustomFormData = () => {
    if (!hasCustomForm || !formRef.current) return;
    
    console.log("نقل بيانات النموذج المخصص إلى react-hook-form");
    const formData = new FormData(formRef.current);
    
    // الحصول على الحقول المتوفرة في النموذج المخصص
    const availableFields = getAvailableCustomFields();
    
    // تحديث القيم في react-hook-form مباشرة - فقط للحقول المتوفرة في النموذج المخصص
    customFields.filter(field => field.isVisible).forEach(field => {
      const fieldName = `custom_${field.name}`;
      const value = formData.get(fieldName);
      
      // التعامل مع الحقول الأساسية وإضافتها إلى نموذج react-hook-form
      if (field.name === 'fullName' || field.name === 'phone' || field.name === 'province' || 
          field.name === 'municipality' || field.name === 'address') {
        if (value !== null && value !== "") {
          form.setValue(field.name as any, value as string, { shouldValidate: true });
          console.log(`تم نقل قيمة ${field.name}: ${value} إلى النموذج الأساسي`);
        }
      }
    });
    
    // تحديث حالة النموذج
    form.trigger();
  };

  /**
   * Get the delivery fee based on selected company
   */
  const getDeliveryFee = (): number => {
    const company = DELIVERY_COMPANIES.find(c => c.id === selectedDeliveryCompany);
    return company ? company.fee : initialDeliveryFee;
  };

  /**
   * Calculate the final price including delivery
   */
  const calculateFinalPrice = (): number => {
    return (price * quantity) + getDeliveryFee();
  };

  /**
   * التحقق من وجود حقول إجبارية غير معبأة في النموذج المخصص
   */
  const validateCustomForm = (): boolean => {
    if (!hasCustomForm || !formRef.current) return true;
    
    console.log("جاري التحقق من النموذج المخصص");
    
    // التحقق من الحقول الإجبارية في النموذج المخصص
    const requiredFields = customFields.filter(field => field.isVisible && field.required);
    let isValid = true;
    let errorMessages: string[] = [];
    
    for (const field of requiredFields) {
      const formData = new FormData(formRef.current);
      const fieldName = `custom_${field.name}`;
      const value = field.type === 'checkbox' 
        ? formData.getAll(`${fieldName}[]`) 
        : formData.get(fieldName);
        
      console.log(`التحقق من الحقل ${field.name}:`, value);
      
      if (!value || (Array.isArray(value) && value.length === 0) || (typeof value === "string" && value.trim() === "")) {
        isValid = false;
        errorMessages.push(`الحقل "${field.label}" مطلوب`);
        
        // إضافة رسالة خطأ للحقل
        const fieldElement = document.getElementById(field.name);
        if (fieldElement) {
          fieldElement.classList.add('border-red-500');
        }
      }
    }
    
    if (!isValid) {
      setOrderError(errorMessages.join(", "));
    }
    
    return isValid;
  };

  // إضافة دالة للتمرير السلس إلى أعلى النموذج عند النقر على زر تأكيد الطلب
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  /**
   * التحقق من الاتصال بقاعدة البيانات قبل إرسال الطلب
   */
  const checkDatabaseConnection = async (): Promise<boolean> => {
    try {
      console.log("التحقق من الاتصال بـ Supabase...");
      // محاولة تنفيذ استعلام بسيط للتأكد من وجود اتصال
      const { data, error } = await supabase.from('inventory_log')
        .select('id')
        .limit(1);
        
      if (error) {
        console.error("خطأ أثناء التحقق من الاتصال:", error);
        return false;
      }
      
      console.log("تم التحقق من الاتصال بـ Supabase بنجاح");
      return true;
    } catch (error) {
      console.error("استثناء أثناء التحقق من الاتصال:", error);
      return false;
    }
  };

  /**
   * معالجة تقديم النموذج
   */
  const processFormSubmission = async (values: OrderFormValues) => {
    console.log("بدء معالجة الطلب", values);
    
    // منع التقديم المتكرر
    if (isSubmitting) {
      console.log("جاري تجهيز الطلب، تم منع التقديم المتكرر");
      return;
    }
    
    // التحقق من النموذج المخصص إذا كان موجوداً
    setFormValidationTriggered(true);
    
    // تعطيل زر التقديم أثناء المعالجة
    setIsSubmitting(true);
    setOrderError(null);
    
    // التحقق من الاتصال بقاعدة البيانات أولاً
    const isConnected = await checkDatabaseConnection();
    if (!isConnected) {
      setOrderError("لا يمكن الاتصال بالخادم. يرجى التحقق من اتصالك بالإنترنت والمحاولة مرة أخرى.");
      toast({
        title: "خطأ في الاتصال",
        description: "تعذر الاتصال بالخادم. يرجى المحاولة مرة أخرى.",
        variant: "destructive",
      });
      setIsSubmitting(false);
      return;
    }
    
    // محاولة ثانية إذا فشلت المحاولة الأولى - تهيئة المتغير
    let retryCount = 0;
    const MAX_RETRIES = 1; // محاولة واحدة إضافية
    
    try {
      // نقل البيانات من النموذج المخصص إلى النموذج الرئيسي إذا كان موجوداً
      if (hasCustomForm) {
        transferCustomFormData();
        
        // التحقق مما إذا كان النموذج المخصص صالحًا
        const isCustomFormValid = validateCustomForm();
        if (!isCustomFormValid) {
          console.log("النموذج المخصص غير صالح");
          setOrderError("يرجى ملء جميع الحقول المطلوبة في النموذج");
          toast({
            title: "تنبيه",
            description: "يرجى ملء جميع الحقول المطلوبة في النموذج",
            variant: "destructive",
          });
          setIsSubmitting(false); // إعادة تمكين الزر
          return;
        }
      }
      
      // إعداد بيانات الطلب
      let orderData: any;
      
      if (hasCustomForm) {
        // Collect custom form data if present
        const customFormData = collectCustomFormData();
        
        // تحديد الحقول المتوفرة في النموذج المخصص
        const availableFields = getAvailableCustomFields();
        
        // إنشاء كائن البيانات مع الحقول المتوفرة فقط
        orderData = {
          // معلومات المنتج والدفع والتوصيل (لا تتغير)
          productId,
          productColorId,
          productSizeId,
          sizeName,
          quantity,
          unitPrice: price,
          totalPrice: price * quantity,
          deliveryFee: getDeliveryFee(),
          deliveryCompany: values.deliveryCompany || "yalidine",
          deliveryOption: values.deliveryOption || "home",
          paymentMethod: values.paymentMethod || "cash_on_delivery",
          notes: values.notes || "",
          
          // بيانات النموذج المخصص
          formData: customFormData
        };
        
        // إضافة الحقول المتوفرة في النموذج المخصص فقط
        if (availableFields.has('fullName')) {
          orderData.fullName = form.getValues('fullName') || customFormData?.fullName || "زائر";
        } else {
          orderData.fullName = "زائر";
        }
        
        if (availableFields.has('phone')) {
          orderData.phone = form.getValues('phone') || customFormData?.phone || "0000000000";
        } else {
          orderData.phone = "0000000000";
        }
        
        if (availableFields.has('province')) {
          orderData.province = form.getValues('province') || customFormData?.province || "غير محدد";
        } else {
          orderData.province = "غير محدد";
        }
        
        if (availableFields.has('municipality')) {
          orderData.municipality = form.getValues('municipality') || customFormData?.municipality || "غير محدد";
        } else {
          orderData.municipality = "غير محدد";
        }
        
        if (availableFields.has('address')) {
          orderData.address = form.getValues('address') || customFormData?.address || "غير محدد";
        } else {
          orderData.address = "غير محدد";
        }
      } else {
        // Prepare order data from standard form
        orderData = {
          // Personal information
          fullName: values.fullName || "زائر",
          phone: values.phone || "0000000000",
          
          // Address information
          province: values.province || "غير محدد",
          municipality: values.municipality || "غير محدد",
          address: values.address || "غير محدد",
          
          // Delivery information
          deliveryCompany: values.deliveryCompany || "yalidine",
          deliveryOption: values.deliveryOption || "home",
          
          // Payment information
          paymentMethod: values.paymentMethod || "cash_on_delivery",
          notes: values.notes || "",
          
          // Product information
          productId,
          productColorId,
          productSizeId,
          sizeName,
          quantity,
          
          // Price information
          unitPrice: price,
          totalPrice: price * quantity,
          deliveryFee: getDeliveryFee(),
        };
      }
      
      console.log("بيانات الطلب الجاهزة للإرسال:", orderData);
      
      // دالة محاولة إرسال الطلب مع إعادة المحاولة
      const attemptOrderSubmission = async (): Promise<any> => {
        // إضافة فحص إضافي لمنع تعليق الصفحة
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => {
            console.log("تجاوز مهلة معالجة الطلب");
            reject(new Error("انتهت مهلة معالجة الطلب"));
          }, 15000); // 15 ثانية كحد أقصى (أقل من الوقت المحدد في store.ts)
        });
        
        // بدء إرسال الطلب
        console.log(`محاولة إرسال الطلب ${retryCount > 0 ? '(محاولة رقم ' + (retryCount + 1) + ')' : ''}...`);
        const orderPromise = processOrder(
          currentOrganization.id,
          orderData
        );
        
        try {
          // استخدام Promise.race لتحديد مهلة زمنية
          const result = await Promise.race([orderPromise, timeoutPromise]) as any;
          console.log("نتيجة معالجة الطلب:", result);
          return result;
        } catch (error) {
          console.error("خطأ في محاولة إرسال الطلب:", error);
          throw error;
        }
      };
      
      // تنفيذ محاولة إرسال الطلب مع دعم إعادة المحاولة
      let orderResult;
      let lastError;
      
      while (retryCount <= MAX_RETRIES) {
        try {
          orderResult = await attemptOrderSubmission();
          // إذا نجحت المحاولة، نخرج من الحلقة
          break;
        } catch (error) {
          lastError = error;
          console.error(`فشلت المحاولة رقم ${retryCount + 1}:`, error);
          
          if (retryCount < MAX_RETRIES) {
            // انتظار قبل المحاولة التالية
            retryCount++;
            await new Promise(resolve => setTimeout(resolve, 1000));
            continue;
          } else {
            // فشل جميع المحاولات
            throw error;
          }
        }
      }
      
      // Check if API returned an error
      if (!orderResult) {
        console.error("عادت نتيجة فارغة من معالجة الطلب");
        throw new Error("لم يتم استلام أي استجابة من الخادم. يرجى المحاولة مرة أخرى.");
      }
      
      if (orderResult && orderResult.error) {
        console.error("استجابة الخطأ من الخادم:", orderResult.error);
        throw new Error(`خطأ API: ${orderResult.error}. التفاصيل: ${orderResult.detail || 'لا توجد تفاصيل متاحة'}`);
      }
      
      // تأكد من أن الصفحة لا تزال نشطة
      if (formRef.current) {
        // Set the order number from the API response
        setOrderNumber(orderResult.order_number?.toString() || "N/A");
        setFormSubmitted(true);
        
        toast({
          title: "تم تقديم الطلب بنجاح",
          description: `رقم الطلب: ${orderResult.order_number}`,
          variant: "default",
        });
        
        // التمرير للأعلى بعد نجاح الطلب
        scrollToTop();
      }
    } catch (error) {
      console.error("Error submitting order:", error);
      let errorMessage = error instanceof Error ? error.message : 'خطأ غير معروف';
      
      // معالجة أنواع الأخطاء المختلفة
      if (errorMessage.includes("انتهت مهلة") || errorMessage.includes("تجاوز مهلة")) {
        errorMessage = "استغرق الطلب وقتًا طويلًا، يرجى التحقق من اتصالك بالإنترنت والمحاولة مرة أخرى.";
      } else if (errorMessage.includes("فشل الاتصال")) {
        errorMessage = "تعذر الاتصال بالخادم. يرجى التحقق من اتصالك بالإنترنت والمحاولة مرة أخرى.";
      } else if (errorMessage.includes("slug")) {
        errorMessage = "حدثت مشكلة في معالجة الطلب. يرجى الاتصال بالدعم الفني.";
      }
      
      setOrderError(`حدث خطأ أثناء معالجة الطلب: ${errorMessage}`);
      
      toast({
        title: "فشل تقديم الطلب",
        description: errorMessage,
        variant: "destructive",
      });
      
      // التمرير إلى العنصر الخطأ
      if (orderError) {
        setTimeout(() => {
          const errorAlert = document.querySelector('.alert-error');
          if (errorAlert) {
            errorAlert.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }, 100);
      }
      
      // إعادة تعيين حالة التقديم بشكل واضح
      setIsSubmitting(false);
    } finally {
      // تأكد من إعادة تمكين زر التقديم دائمًا
      setIsSubmitting(false);
      console.log("اكتملت معالجة الطلب (بنجاح أو بخطأ)");
    }
  };

  /**
   * معالجة التقديم المباشر للنموذج
   */
  const handleDirectSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // إضافة فحص إضافي لضمان عدم تقديم متكرر
    if (isSubmitting || formSubmitted) {
      console.log("تجاهل التقديم المباشر - التقديم جاري بالفعل أو تم بنجاح", { isSubmitting, formSubmitted });
      return;
    }
    
    console.log("تم تقديم النموذج عبر onSubmit المباشر");
    
    // تأشير بدء عملية التقديم
    setIsSubmitting(true);
    
    try {
      // نقل البيانات من النموذج المخصص إلى النموذج الرئيسي قبل التحقق
      if (hasCustomForm) {
        transferCustomFormData();
      }
      
      // استخدام وظيفة التحقق الخاصة ب react-hook-form
      form.handleSubmit(
        (values) => {
          console.log("تم تقديم النموذج بنجاح عبر react-hook-form");
          // تنفيذ التقديم مرة واحدة فقط، والتحقق من أن الصفحة لم تُقدم بالفعل
          if (!formSubmitted) {
            processFormSubmission(values);
          } else {
            console.log("تم تجاهل التقديم لأن النموذج تم تقديمه بالفعل");
            setIsSubmitting(false); // التأكد من إعادة تمكين الزر
          }
        }, 
        (errors) => {
          console.log("فشل تقديم النموذج عبر react-hook-form", errors);
          setOrderError("يرجى تعبئة جميع الحقول المطلوبة بشكل صحيح");
          // عرض الأخطاء للمستخدم
          toast({
            title: "خطأ في النموذج",
            description: "يرجى التحقق من صحة المعلومات المدخلة",
            variant: "destructive",
          });
          setIsSubmitting(false); // التأكد من إعادة تمكين الزر
        }
      )(e); // تمرير الحدث بشكل صحيح
    } catch (error) {
      console.error("خطأ غير متوقع في معالجة النموذج:", error);
      setOrderError("حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى.");
      
      toast({
        title: "خطأ",
        description: "حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى.",
        variant: "destructive",
      });
      
      // التأكد من إعادة تمكين الزر
      setIsSubmitting(false);
    }
  };

  // If the form was successfully submitted, show success component
  if (formSubmitted) {
    return (
      <OrderSuccess 
        orderNumber={orderNumber}
        quantity={quantity}
        price={price}
        deliveryFee={getDeliveryFee()}
        totalPrice={calculateFinalPrice()}
      />
    );
  }

  // حساب ما إذا كان النموذج طويلاً ويحتاج لزر تمرير
  const isLongForm = hasCustomForm && customFields.filter(field => field.isVisible).length > 3;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="max-w-3xl mx-auto"
    >
      {/* إضافة زر للتمرير إلى أعلى النموذج عند تعبئة حقول كثيرة */}
      {isLongForm && (
        <motion.div 
          className="fixed bottom-6 left-6 z-50"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1 }}
        >
          <Button
            variant="outline"
            size="icon"
            className="rounded-full h-12 w-12 shadow-md bg-primary text-primary-foreground hover:bg-primary/90"
            onClick={scrollToTop}
          >
            <motion.div
              animate={{ y: [0, -5, 0] }}
              transition={{ repeat: Infinity, duration: 1.5 }}
            >
              <ArrowUp className="h-5 w-5" />
            </motion.div>
          </Button>
        </motion.div>
      )}

      {/* Show error message if order submission failed */}
      {orderError && (
        <Alert variant="destructive" className="mb-6 alert-error">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>خطأ</AlertTitle>
          <AlertDescription>{orderError}</AlertDescription>
        </Alert>
      )}

      {/* تحديث نموذج الطلب للحد من مشكلة الحلقة اللانهائية وتحسين التحقق من البيانات */}
      <form 
        ref={formRef}
        onSubmit={handleDirectSubmit}
        className="space-y-6"
        noValidate
      >
        <Card className="shadow-md border-muted overflow-hidden bg-card dark:bg-background">
          <CardHeader className="bg-muted/30 border-b">
            <CardTitle className="text-xl">معلومات الطلب</CardTitle>
            <CardDescription>يرجى تعبئة جميع البيانات المطلوبة لإتمام الطلب</CardDescription>
          </CardHeader>
          
          <CardContent className="pt-6 pb-4 grid gap-6">
            {/* إذا كان هناك نموذج مخصص، نعرضه فقط بدلاً من النموذج الافتراضي */}
            {hasCustomForm ? (
              <CustomFormFields customFields={customFields.filter(field => field.isVisible)} />
            ) : (
              <>
                {/* حقول المعلومات الشخصية */}
                <PersonalInfoFields form={form} />

                {/* حقول معلومات التوصيل */}
                <DeliveryInfoFields 
                  form={form}
                  onDeliveryCompanyChange={setSelectedDeliveryCompany}
                />
              </>
            )}
          </CardContent>

          {/* ملخص الطلب */}
          <OrderSummary 
            quantity={quantity}
            price={price}
            deliveryFee={getDeliveryFee()}
            total={calculateFinalPrice()}
            isSubmitting={isSubmitting}
          />
        </Card>
      </form>
    </motion.div>
  );
};

export default OrderForm; 
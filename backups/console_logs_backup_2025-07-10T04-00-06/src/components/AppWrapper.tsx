/**
 * ┘Е┘Г┘И┘Ж AppWrapper ┘Е┘П╪и╪│╪╖ - ┘К╪╢┘Е┘Ж ╪к╪н┘Е┘К┘Д ╪м┘Е┘К╪╣ ╪з┘Д╪и┘К╪з┘Ж╪з╪к ┘В╪и┘Д ╪╣╪▒╪╢ ╪з┘Д┘Е╪н╪к┘И┘Й
 */

import React, { useEffect, useState, useRef } from 'react';
import { getAppInitData, isAppInitDataValid, initializeApp } from '@/lib/appInitializer';

interface AppWrapperProps {
  children: React.ReactNode;
}

// ╪┤╪з╪┤╪й ╪з┘Д╪к╪н┘Е┘К┘Д ╪з┘Д┘Е╪о╪╡╪╡╪й
const LoadingScreen: React.FC = () => (
  <div className="fixed inset-0 flex items-center justify-center bg-white dark:bg-gray-900 z-50">
    <div className="text-center">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
      <p className="text-gray-600 dark:text-gray-300">╪м╪з╪▒┘К ╪к╪н┘Е┘К┘Д ╪з┘Д┘Е╪к╪м╪▒...</p>
    </div>
  </div>
);

// ╪┤╪з╪┤╪й ╪з┘Д╪о╪╖╪г
const ErrorScreen: React.FC<{ onRetry: () => void }> = ({ onRetry }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-white dark:bg-gray-900 z-50">
    <div className="text-center max-w-md p-6">
      <div className="text-red-500 text-6xl mb-4">тЪая╕П</div>
      <h2 className="text-xl font-bold text-gray-800 dark:text-white mb-2">
        ╪о╪╖╪г ┘Б┘К ╪к╪н┘Е┘К┘Д ╪з┘Д┘Е╪к╪м╪▒
      </h2>
      <p className="text-gray-600 dark:text-gray-300 mb-4">
        ╪н╪п╪л ╪о╪╖╪г ╪г╪л┘Ж╪з╪б ╪к╪н┘Е┘К┘Д ╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪к╪м╪▒. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й.
      </p>
      <button
        onClick={onRetry}
        className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
      >
        ╪е╪╣╪з╪п╪й ╪з┘Д┘Е╪н╪з┘И┘Д╪й
      </button>
    </div>
  </div>
);

const AppWrapper: React.FC<AppWrapperProps> = ({ children }) => {
  const [isReady, setIsReady] = useState(false);
  const [hasError, setHasError] = useState(false);
  const isInitializedRef = useRef(false);
  const mountedRef = useRef(true);

  const initializeData = async () => {
    // ┘Е┘Ж╪╣ ╪з┘Д╪к╪┤╪║┘К┘Д ╪з┘Д┘Е╪к┘Г╪▒╪▒
    if (isInitializedRef.current) {
      console.log('ЁЯЪА [AppWrapper] ╪к┘Е ╪к╪м╪з┘З┘Д ╪з┘Д╪к╪┤╪║┘К┘Д ╪з┘Д┘Е╪к┘Г╪▒╪▒');
      return;
    }
    
    try {
      console.log('ЁЯЪА [AppWrapper] === ╪и╪п╪б ╪к┘З┘К╪ж╪й ╪з┘Д╪к╪╖╪и┘К┘В ===');
      setHasError(false);
      
      // ┘Б╪н╪╡ ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪н┘Б┘И╪╕╪й ╪г┘И┘Д╪з┘Л
      if (isAppInitDataValid()) {
        const savedData = getAppInitData();
        if (savedData && mountedRef.current) {
          console.log('ЁЯЪА [AppWrapper] ╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪н┘Б┘И╪╕╪й');
          isInitializedRef.current = true;
          setIsReady(true);
          return;
        }
      }

      // ╪м┘Д╪и ╪и┘К╪з┘Ж╪з╪к ╪м╪п┘К╪п╪й ╪е╪░╪з ┘Д┘Е ╪к┘И╪м╪п
      console.log('ЁЯЪА [AppWrapper] ╪м┘Д╪и ╪и┘К╪з┘Ж╪з╪к ╪м╪п┘К╪п╪й');
      const data = await initializeApp();

      if (data && mountedRef.current) {
        console.log('ЁЯЪА [AppWrapper] ╪к┘Е ╪к╪н┘Е┘К┘Д ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪и┘Ж╪м╪з╪н');
        isInitializedRef.current = true;
        setIsReady(true);
      } else if (mountedRef.current) {
        console.error('ЁЯЪА [AppWrapper] ┘Б╪┤┘Д ┘Б┘К ╪к╪н┘Е┘К┘Д ╪з┘Д╪и┘К╪з┘Ж╪з╪к');
        setHasError(true);
      }
    } catch (error) {
      console.error('ЁЯЪА [AppWrapper] ╪о╪╖╪г ┘Б┘К ╪з┘Д╪к┘З┘К╪ж╪й:', error);
      if (mountedRef.current) {
        setHasError(true);
      }
    }
  };

  const handleRetry = () => {
    isInitializedRef.current = false;
    setIsReady(false);
    setHasError(false);
    initializeData();
  };

  useEffect(() => {
    mountedRef.current = true;
    initializeData();
    
    return () => {
      mountedRef.current = false;
    };
  }, []); // ┘Б┘В╪╖ ╪╣┘Ж╪п mount ╪з┘Д╪г┘И┘Д

  // ╪┤╪з╪┤╪й ╪з┘Д╪о╪╖╪г
  if (hasError) {
    return <ErrorScreen onRetry={handleRetry} />;
  }

  // ╪┤╪з╪┤╪й ╪з┘Д╪к╪н┘Е┘К┘Д
  if (!isReady) {
    return <LoadingScreen />;
  }

  // ╪╣╪▒╪╢ ╪з┘Д┘Е╪н╪к┘И┘Й
  console.log('ЁЯЪА [AppWrapper] === ╪╣╪▒╪╢ ╪з┘Д┘Е╪н╪к┘И┘Й ===');
  return <>{children}</>;
};

export default AppWrapper; 